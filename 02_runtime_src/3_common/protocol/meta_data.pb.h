// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: meta_data.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_meta_5fdata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_meta_5fdata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_meta_5fdata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_meta_5fdata_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_meta_5fdata_2eproto;
namespace MetaData {
class Data;
class DataDefaultTypeInternal;
extern DataDefaultTypeInternal _Data_default_instance_;
class DataDescriptor;
class DataDescriptorDefaultTypeInternal;
extern DataDescriptorDefaultTypeInternal _DataDescriptor_default_instance_;
class SerializedData;
class SerializedDataDefaultTypeInternal;
extern SerializedDataDefaultTypeInternal _SerializedData_default_instance_;
class StructurePerception;
class StructurePerceptionDefaultTypeInternal;
extern StructurePerceptionDefaultTypeInternal _StructurePerception_default_instance_;
}  // namespace MetaData
PROTOBUF_NAMESPACE_OPEN
template<> ::MetaData::Data* Arena::CreateMaybeMessage<::MetaData::Data>(Arena*);
template<> ::MetaData::DataDescriptor* Arena::CreateMaybeMessage<::MetaData::DataDescriptor>(Arena*);
template<> ::MetaData::SerializedData* Arena::CreateMaybeMessage<::MetaData::SerializedData>(Arena*);
template<> ::MetaData::StructurePerception* Arena::CreateMaybeMessage<::MetaData::StructurePerception>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace MetaData {

enum DataType : int {
  DATA_IMG = 0,
  DATA_PARSING = 1
};
bool DataType_IsValid(int value);
constexpr DataType DataType_MIN = DATA_IMG;
constexpr DataType DataType_MAX = DATA_PARSING;
constexpr int DataType_ARRAYSIZE = DataType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataType_descriptor();
template<typename T>
inline const std::string& DataType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DataType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DataType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DataType_descriptor(), enum_t_value);
}
inline bool DataType_Parse(
    const std::string& name, DataType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DataType>(
    DataType_descriptor(), name, value);
}
// ===================================================================

class StructurePerception :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MetaData.StructurePerception) */ {
 public:
  StructurePerception();
  virtual ~StructurePerception();

  StructurePerception(const StructurePerception& from);
  StructurePerception(StructurePerception&& from) noexcept
    : StructurePerception() {
    *this = ::std::move(from);
  }

  inline StructurePerception& operator=(const StructurePerception& from) {
    CopyFrom(from);
    return *this;
  }
  inline StructurePerception& operator=(StructurePerception&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StructurePerception& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StructurePerception* internal_default_instance() {
    return reinterpret_cast<const StructurePerception*>(
               &_StructurePerception_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(StructurePerception* other);
  friend void swap(StructurePerception& a, StructurePerception& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StructurePerception* New() const final {
    return CreateMaybeMessage<StructurePerception>(nullptr);
  }

  StructurePerception* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StructurePerception>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StructurePerception& from);
  void MergeFrom(const StructurePerception& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StructurePerception* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MetaData.StructurePerception";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_meta_5fdata_2eproto);
    return ::descriptor_table_meta_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CommonProto.ObstacleRaws obstacles_raws = 1;
  int obstacles_raws_size() const;
  void clear_obstacles_raws();
  static const int kObstaclesRawsFieldNumber = 1;
  ::CommonProto::ObstacleRaws* mutable_obstacles_raws(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::ObstacleRaws >*
      mutable_obstacles_raws();
  const ::CommonProto::ObstacleRaws& obstacles_raws(int index) const;
  ::CommonProto::ObstacleRaws* add_obstacles_raws();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::ObstacleRaws >&
      obstacles_raws() const;

  // repeated .CommonProto.Image parsing = 20;
  int parsing_size() const;
  void clear_parsing();
  static const int kParsingFieldNumber = 20;
  ::CommonProto::Image* mutable_parsing(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::Image >*
      mutable_parsing();
  const ::CommonProto::Image& parsing(int index) const;
  ::CommonProto::Image* add_parsing();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::Image >&
      parsing() const;

  // repeated .CommonProto.ParsingSetting parsing_settings = 40;
  int parsing_settings_size() const;
  void clear_parsing_settings();
  static const int kParsingSettingsFieldNumber = 40;
  ::CommonProto::ParsingSetting* mutable_parsing_settings(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::ParsingSetting >*
      mutable_parsing_settings();
  const ::CommonProto::ParsingSetting& parsing_settings(int index) const;
  ::CommonProto::ParsingSetting* add_parsing_settings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::ParsingSetting >&
      parsing_settings() const;

  // @@protoc_insertion_point(class_scope:MetaData.StructurePerception)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::ObstacleRaws > obstacles_raws_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::Image > parsing_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::ParsingSetting > parsing_settings_;
  friend struct ::TableStruct_meta_5fdata_2eproto;
};
// -------------------------------------------------------------------

class SerializedData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MetaData.SerializedData) */ {
 public:
  SerializedData();
  virtual ~SerializedData();

  SerializedData(const SerializedData& from);
  SerializedData(SerializedData&& from) noexcept
    : SerializedData() {
    *this = ::std::move(from);
  }

  inline SerializedData& operator=(const SerializedData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SerializedData& operator=(SerializedData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SerializedData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SerializedData* internal_default_instance() {
    return reinterpret_cast<const SerializedData*>(
               &_SerializedData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(SerializedData* other);
  friend void swap(SerializedData& a, SerializedData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SerializedData* New() const final {
    return CreateMaybeMessage<SerializedData>(nullptr);
  }

  SerializedData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SerializedData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SerializedData& from);
  void MergeFrom(const SerializedData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SerializedData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MetaData.SerializedData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_meta_5fdata_2eproto);
    return ::descriptor_table_meta_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);

  // required bytes proto = 2;
  bool has_proto() const;
  void clear_proto();
  static const int kProtoFieldNumber = 2;
  const std::string& proto() const;
  void set_proto(const std::string& value);
  void set_proto(std::string&& value);
  void set_proto(const char* value);
  void set_proto(const void* value, size_t size);
  std::string* mutable_proto();
  std::string* release_proto();
  void set_allocated_proto(std::string* proto);

  // required int32 channel = 4 [default = 0];
  bool has_channel() const;
  void clear_channel();
  static const int kChannelFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int32 channel() const;
  void set_channel(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required bool with_data_field = 5 [default = true];
  bool has_with_data_field() const;
  void clear_with_data_field();
  static const int kWithDataFieldFieldNumber = 5;
  bool with_data_field() const;
  void set_with_data_field(bool value);

  // @@protoc_insertion_point(class_scope:MetaData.SerializedData)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proto_;
  ::PROTOBUF_NAMESPACE_ID::int32 channel_;
  bool with_data_field_;
  friend struct ::TableStruct_meta_5fdata_2eproto;
};
// -------------------------------------------------------------------

class DataDescriptor :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MetaData.DataDescriptor) */ {
 public:
  DataDescriptor();
  virtual ~DataDescriptor();

  DataDescriptor(const DataDescriptor& from);
  DataDescriptor(DataDescriptor&& from) noexcept
    : DataDescriptor() {
    *this = ::std::move(from);
  }

  inline DataDescriptor& operator=(const DataDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataDescriptor& operator=(DataDescriptor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DataDescriptor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataDescriptor* internal_default_instance() {
    return reinterpret_cast<const DataDescriptor*>(
               &_DataDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(DataDescriptor* other);
  friend void swap(DataDescriptor& a, DataDescriptor& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DataDescriptor* New() const final {
    return CreateMaybeMessage<DataDescriptor>(nullptr);
  }

  DataDescriptor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DataDescriptor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DataDescriptor& from);
  void MergeFrom(const DataDescriptor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataDescriptor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MetaData.DataDescriptor";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_meta_5fdata_2eproto);
    return ::descriptor_table_meta_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);

  // optional .MetaData.SerializedData data = 2;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::MetaData::SerializedData& data() const;
  ::MetaData::SerializedData* release_data();
  ::MetaData::SerializedData* mutable_data();
  void set_allocated_data(::MetaData::SerializedData* data);

  // @@protoc_insertion_point(class_scope:MetaData.DataDescriptor)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::MetaData::SerializedData* data_;
  friend struct ::TableStruct_meta_5fdata_2eproto;
};
// -------------------------------------------------------------------

class Data :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MetaData.Data) */ {
 public:
  Data();
  virtual ~Data();

  Data(const Data& from);
  Data(Data&& from) noexcept
    : Data() {
    *this = ::std::move(from);
  }

  inline Data& operator=(const Data& from) {
    CopyFrom(from);
    return *this;
  }
  inline Data& operator=(Data&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Data& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Data* internal_default_instance() {
    return reinterpret_cast<const Data*>(
               &_Data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Data* other);
  friend void swap(Data& a, Data& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Data* New() const final {
    return CreateMaybeMessage<Data>(nullptr);
  }

  Data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Data>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Data& from);
  void MergeFrom(const Data& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Data* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MetaData.Data";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_meta_5fdata_2eproto);
    return ::descriptor_table_meta_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CommonProto.Image image = 3;
  int image_size() const;
  void clear_image();
  static const int kImageFieldNumber = 3;
  ::CommonProto::Image* mutable_image(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::Image >*
      mutable_image();
  const ::CommonProto::Image& image(int index) const;
  ::CommonProto::Image* add_image();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::Image >&
      image() const;

  // repeated .MetaData.DataDescriptor data_descriptor = 4;
  int data_descriptor_size() const;
  void clear_data_descriptor();
  static const int kDataDescriptorFieldNumber = 4;
  ::MetaData::DataDescriptor* mutable_data_descriptor(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MetaData::DataDescriptor >*
      mutable_data_descriptor();
  const ::MetaData::DataDescriptor& data_descriptor(int index) const;
  ::MetaData::DataDescriptor* add_data_descriptor();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MetaData::DataDescriptor >&
      data_descriptor() const;

  // repeated .CommonProto.CameraParam camera = 10;
  int camera_size() const;
  void clear_camera();
  static const int kCameraFieldNumber = 10;
  ::CommonProto::CameraParam* mutable_camera(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::CameraParam >*
      mutable_camera();
  const ::CommonProto::CameraParam& camera(int index) const;
  ::CommonProto::CameraParam* add_camera();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::CameraParam >&
      camera() const;

  // repeated .CommonProto.CameraParam camera_default = 11;
  int camera_default_size() const;
  void clear_camera_default();
  static const int kCameraDefaultFieldNumber = 11;
  ::CommonProto::CameraParam* mutable_camera_default(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::CameraParam >*
      mutable_camera_default();
  const ::CommonProto::CameraParam& camera_default(int index) const;
  ::CommonProto::CameraParam* add_camera_default();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::CameraParam >&
      camera_default() const;

  // repeated .CommonProto.CameraMatrix camera_matrix = 12;
  int camera_matrix_size() const;
  void clear_camera_matrix();
  static const int kCameraMatrixFieldNumber = 12;
  ::CommonProto::CameraMatrix* mutable_camera_matrix(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::CameraMatrix >*
      mutable_camera_matrix();
  const ::CommonProto::CameraMatrix& camera_matrix(int index) const;
  ::CommonProto::CameraMatrix* add_camera_matrix();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::CameraMatrix >&
      camera_matrix() const;

  // optional .MetaData.StructurePerception structure_perception = 30;
  bool has_structure_perception() const;
  void clear_structure_perception();
  static const int kStructurePerceptionFieldNumber = 30;
  const ::MetaData::StructurePerception& structure_perception() const;
  ::MetaData::StructurePerception* release_structure_perception();
  ::MetaData::StructurePerception* mutable_structure_perception();
  void set_allocated_structure_perception(::MetaData::StructurePerception* structure_perception);

  // required int32 version = 1;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required int32 frame_id = 2;
  bool has_frame_id() const;
  void clear_frame_id();
  static const int kFrameIdFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 frame_id() const;
  void set_frame_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:MetaData.Data)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::Image > image_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MetaData::DataDescriptor > data_descriptor_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::CameraParam > camera_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::CameraParam > camera_default_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::CameraMatrix > camera_matrix_;
  ::MetaData::StructurePerception* structure_perception_;
  ::PROTOBUF_NAMESPACE_ID::int32 version_;
  ::PROTOBUF_NAMESPACE_ID::int32 frame_id_;
  friend struct ::TableStruct_meta_5fdata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StructurePerception

// repeated .CommonProto.ObstacleRaws obstacles_raws = 1;
inline int StructurePerception::obstacles_raws_size() const {
  return obstacles_raws_.size();
}
inline ::CommonProto::ObstacleRaws* StructurePerception::mutable_obstacles_raws(int index) {
  // @@protoc_insertion_point(field_mutable:MetaData.StructurePerception.obstacles_raws)
  return obstacles_raws_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::ObstacleRaws >*
StructurePerception::mutable_obstacles_raws() {
  // @@protoc_insertion_point(field_mutable_list:MetaData.StructurePerception.obstacles_raws)
  return &obstacles_raws_;
}
inline const ::CommonProto::ObstacleRaws& StructurePerception::obstacles_raws(int index) const {
  // @@protoc_insertion_point(field_get:MetaData.StructurePerception.obstacles_raws)
  return obstacles_raws_.Get(index);
}
inline ::CommonProto::ObstacleRaws* StructurePerception::add_obstacles_raws() {
  // @@protoc_insertion_point(field_add:MetaData.StructurePerception.obstacles_raws)
  return obstacles_raws_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::ObstacleRaws >&
StructurePerception::obstacles_raws() const {
  // @@protoc_insertion_point(field_list:MetaData.StructurePerception.obstacles_raws)
  return obstacles_raws_;
}

// repeated .CommonProto.Image parsing = 20;
inline int StructurePerception::parsing_size() const {
  return parsing_.size();
}
inline ::CommonProto::Image* StructurePerception::mutable_parsing(int index) {
  // @@protoc_insertion_point(field_mutable:MetaData.StructurePerception.parsing)
  return parsing_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::Image >*
StructurePerception::mutable_parsing() {
  // @@protoc_insertion_point(field_mutable_list:MetaData.StructurePerception.parsing)
  return &parsing_;
}
inline const ::CommonProto::Image& StructurePerception::parsing(int index) const {
  // @@protoc_insertion_point(field_get:MetaData.StructurePerception.parsing)
  return parsing_.Get(index);
}
inline ::CommonProto::Image* StructurePerception::add_parsing() {
  // @@protoc_insertion_point(field_add:MetaData.StructurePerception.parsing)
  return parsing_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::Image >&
StructurePerception::parsing() const {
  // @@protoc_insertion_point(field_list:MetaData.StructurePerception.parsing)
  return parsing_;
}

// repeated .CommonProto.ParsingSetting parsing_settings = 40;
inline int StructurePerception::parsing_settings_size() const {
  return parsing_settings_.size();
}
inline ::CommonProto::ParsingSetting* StructurePerception::mutable_parsing_settings(int index) {
  // @@protoc_insertion_point(field_mutable:MetaData.StructurePerception.parsing_settings)
  return parsing_settings_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::ParsingSetting >*
StructurePerception::mutable_parsing_settings() {
  // @@protoc_insertion_point(field_mutable_list:MetaData.StructurePerception.parsing_settings)
  return &parsing_settings_;
}
inline const ::CommonProto::ParsingSetting& StructurePerception::parsing_settings(int index) const {
  // @@protoc_insertion_point(field_get:MetaData.StructurePerception.parsing_settings)
  return parsing_settings_.Get(index);
}
inline ::CommonProto::ParsingSetting* StructurePerception::add_parsing_settings() {
  // @@protoc_insertion_point(field_add:MetaData.StructurePerception.parsing_settings)
  return parsing_settings_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::ParsingSetting >&
StructurePerception::parsing_settings() const {
  // @@protoc_insertion_point(field_list:MetaData.StructurePerception.parsing_settings)
  return parsing_settings_;
}

// -------------------------------------------------------------------

// SerializedData

// required string type = 1;
inline bool SerializedData::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SerializedData::clear_type() {
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SerializedData::type() const {
  // @@protoc_insertion_point(field_get:MetaData.SerializedData.type)
  return type_.GetNoArena();
}
inline void SerializedData::set_type(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MetaData.SerializedData.type)
}
inline void SerializedData::set_type(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MetaData.SerializedData.type)
}
inline void SerializedData::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MetaData.SerializedData.type)
}
inline void SerializedData::set_type(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MetaData.SerializedData.type)
}
inline std::string* SerializedData::mutable_type() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:MetaData.SerializedData.type)
  return type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SerializedData::release_type() {
  // @@protoc_insertion_point(field_release:MetaData.SerializedData.type)
  if (!has_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return type_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SerializedData::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:MetaData.SerializedData.type)
}

// required bytes proto = 2;
inline bool SerializedData::has_proto() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SerializedData::clear_proto() {
  proto_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SerializedData::proto() const {
  // @@protoc_insertion_point(field_get:MetaData.SerializedData.proto)
  return proto_.GetNoArena();
}
inline void SerializedData::set_proto(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  proto_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MetaData.SerializedData.proto)
}
inline void SerializedData::set_proto(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  proto_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MetaData.SerializedData.proto)
}
inline void SerializedData::set_proto(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  proto_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MetaData.SerializedData.proto)
}
inline void SerializedData::set_proto(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  proto_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MetaData.SerializedData.proto)
}
inline std::string* SerializedData::mutable_proto() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:MetaData.SerializedData.proto)
  return proto_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SerializedData::release_proto() {
  // @@protoc_insertion_point(field_release:MetaData.SerializedData.proto)
  if (!has_proto()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return proto_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SerializedData::set_allocated_proto(std::string* proto) {
  if (proto != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  proto_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), proto);
  // @@protoc_insertion_point(field_set_allocated:MetaData.SerializedData.proto)
}

// required int32 channel = 4 [default = 0];
inline bool SerializedData::has_channel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SerializedData::clear_channel() {
  channel_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SerializedData::channel() const {
  // @@protoc_insertion_point(field_get:MetaData.SerializedData.channel)
  return channel_;
}
inline void SerializedData::set_channel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  channel_ = value;
  // @@protoc_insertion_point(field_set:MetaData.SerializedData.channel)
}

// required bool with_data_field = 5 [default = true];
inline bool SerializedData::has_with_data_field() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SerializedData::clear_with_data_field() {
  with_data_field_ = true;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool SerializedData::with_data_field() const {
  // @@protoc_insertion_point(field_get:MetaData.SerializedData.with_data_field)
  return with_data_field_;
}
inline void SerializedData::set_with_data_field(bool value) {
  _has_bits_[0] |= 0x00000008u;
  with_data_field_ = value;
  // @@protoc_insertion_point(field_set:MetaData.SerializedData.with_data_field)
}

// -------------------------------------------------------------------

// DataDescriptor

// optional string type = 1;
inline bool DataDescriptor::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataDescriptor::clear_type() {
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DataDescriptor::type() const {
  // @@protoc_insertion_point(field_get:MetaData.DataDescriptor.type)
  return type_.GetNoArena();
}
inline void DataDescriptor::set_type(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MetaData.DataDescriptor.type)
}
inline void DataDescriptor::set_type(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MetaData.DataDescriptor.type)
}
inline void DataDescriptor::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MetaData.DataDescriptor.type)
}
inline void DataDescriptor::set_type(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MetaData.DataDescriptor.type)
}
inline std::string* DataDescriptor::mutable_type() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:MetaData.DataDescriptor.type)
  return type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DataDescriptor::release_type() {
  // @@protoc_insertion_point(field_release:MetaData.DataDescriptor.type)
  if (!has_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return type_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DataDescriptor::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:MetaData.DataDescriptor.type)
}

// optional .MetaData.SerializedData data = 2;
inline bool DataDescriptor::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DataDescriptor::clear_data() {
  if (data_ != nullptr) data_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::MetaData::SerializedData& DataDescriptor::data() const {
  const ::MetaData::SerializedData* p = data_;
  // @@protoc_insertion_point(field_get:MetaData.DataDescriptor.data)
  return p != nullptr ? *p : *reinterpret_cast<const ::MetaData::SerializedData*>(
      &::MetaData::_SerializedData_default_instance_);
}
inline ::MetaData::SerializedData* DataDescriptor::release_data() {
  // @@protoc_insertion_point(field_release:MetaData.DataDescriptor.data)
  _has_bits_[0] &= ~0x00000002u;
  ::MetaData::SerializedData* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::MetaData::SerializedData* DataDescriptor::mutable_data() {
  _has_bits_[0] |= 0x00000002u;
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::MetaData::SerializedData>(GetArenaNoVirtual());
    data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:MetaData.DataDescriptor.data)
  return data_;
}
inline void DataDescriptor::set_allocated_data(::MetaData::SerializedData* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:MetaData.DataDescriptor.data)
}

// -------------------------------------------------------------------

// Data

// required int32 version = 1;
inline bool Data::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Data::clear_version() {
  version_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Data::version() const {
  // @@protoc_insertion_point(field_get:MetaData.Data.version)
  return version_;
}
inline void Data::set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  version_ = value;
  // @@protoc_insertion_point(field_set:MetaData.Data.version)
}

// required int32 frame_id = 2;
inline bool Data::has_frame_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Data::clear_frame_id() {
  frame_id_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Data::frame_id() const {
  // @@protoc_insertion_point(field_get:MetaData.Data.frame_id)
  return frame_id_;
}
inline void Data::set_frame_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  frame_id_ = value;
  // @@protoc_insertion_point(field_set:MetaData.Data.frame_id)
}

// repeated .CommonProto.Image image = 3;
inline int Data::image_size() const {
  return image_.size();
}
inline ::CommonProto::Image* Data::mutable_image(int index) {
  // @@protoc_insertion_point(field_mutable:MetaData.Data.image)
  return image_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::Image >*
Data::mutable_image() {
  // @@protoc_insertion_point(field_mutable_list:MetaData.Data.image)
  return &image_;
}
inline const ::CommonProto::Image& Data::image(int index) const {
  // @@protoc_insertion_point(field_get:MetaData.Data.image)
  return image_.Get(index);
}
inline ::CommonProto::Image* Data::add_image() {
  // @@protoc_insertion_point(field_add:MetaData.Data.image)
  return image_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::Image >&
Data::image() const {
  // @@protoc_insertion_point(field_list:MetaData.Data.image)
  return image_;
}

// repeated .MetaData.DataDescriptor data_descriptor = 4;
inline int Data::data_descriptor_size() const {
  return data_descriptor_.size();
}
inline void Data::clear_data_descriptor() {
  data_descriptor_.Clear();
}
inline ::MetaData::DataDescriptor* Data::mutable_data_descriptor(int index) {
  // @@protoc_insertion_point(field_mutable:MetaData.Data.data_descriptor)
  return data_descriptor_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MetaData::DataDescriptor >*
Data::mutable_data_descriptor() {
  // @@protoc_insertion_point(field_mutable_list:MetaData.Data.data_descriptor)
  return &data_descriptor_;
}
inline const ::MetaData::DataDescriptor& Data::data_descriptor(int index) const {
  // @@protoc_insertion_point(field_get:MetaData.Data.data_descriptor)
  return data_descriptor_.Get(index);
}
inline ::MetaData::DataDescriptor* Data::add_data_descriptor() {
  // @@protoc_insertion_point(field_add:MetaData.Data.data_descriptor)
  return data_descriptor_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MetaData::DataDescriptor >&
Data::data_descriptor() const {
  // @@protoc_insertion_point(field_list:MetaData.Data.data_descriptor)
  return data_descriptor_;
}

// repeated .CommonProto.CameraParam camera = 10;
inline int Data::camera_size() const {
  return camera_.size();
}
inline ::CommonProto::CameraParam* Data::mutable_camera(int index) {
  // @@protoc_insertion_point(field_mutable:MetaData.Data.camera)
  return camera_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::CameraParam >*
Data::mutable_camera() {
  // @@protoc_insertion_point(field_mutable_list:MetaData.Data.camera)
  return &camera_;
}
inline const ::CommonProto::CameraParam& Data::camera(int index) const {
  // @@protoc_insertion_point(field_get:MetaData.Data.camera)
  return camera_.Get(index);
}
inline ::CommonProto::CameraParam* Data::add_camera() {
  // @@protoc_insertion_point(field_add:MetaData.Data.camera)
  return camera_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::CameraParam >&
Data::camera() const {
  // @@protoc_insertion_point(field_list:MetaData.Data.camera)
  return camera_;
}

// repeated .CommonProto.CameraParam camera_default = 11;
inline int Data::camera_default_size() const {
  return camera_default_.size();
}
inline ::CommonProto::CameraParam* Data::mutable_camera_default(int index) {
  // @@protoc_insertion_point(field_mutable:MetaData.Data.camera_default)
  return camera_default_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::CameraParam >*
Data::mutable_camera_default() {
  // @@protoc_insertion_point(field_mutable_list:MetaData.Data.camera_default)
  return &camera_default_;
}
inline const ::CommonProto::CameraParam& Data::camera_default(int index) const {
  // @@protoc_insertion_point(field_get:MetaData.Data.camera_default)
  return camera_default_.Get(index);
}
inline ::CommonProto::CameraParam* Data::add_camera_default() {
  // @@protoc_insertion_point(field_add:MetaData.Data.camera_default)
  return camera_default_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::CameraParam >&
Data::camera_default() const {
  // @@protoc_insertion_point(field_list:MetaData.Data.camera_default)
  return camera_default_;
}

// repeated .CommonProto.CameraMatrix camera_matrix = 12;
inline int Data::camera_matrix_size() const {
  return camera_matrix_.size();
}
inline ::CommonProto::CameraMatrix* Data::mutable_camera_matrix(int index) {
  // @@protoc_insertion_point(field_mutable:MetaData.Data.camera_matrix)
  return camera_matrix_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::CameraMatrix >*
Data::mutable_camera_matrix() {
  // @@protoc_insertion_point(field_mutable_list:MetaData.Data.camera_matrix)
  return &camera_matrix_;
}
inline const ::CommonProto::CameraMatrix& Data::camera_matrix(int index) const {
  // @@protoc_insertion_point(field_get:MetaData.Data.camera_matrix)
  return camera_matrix_.Get(index);
}
inline ::CommonProto::CameraMatrix* Data::add_camera_matrix() {
  // @@protoc_insertion_point(field_add:MetaData.Data.camera_matrix)
  return camera_matrix_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::CameraMatrix >&
Data::camera_matrix() const {
  // @@protoc_insertion_point(field_list:MetaData.Data.camera_matrix)
  return camera_matrix_;
}

// optional .MetaData.StructurePerception structure_perception = 30;
inline bool Data::has_structure_perception() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Data::clear_structure_perception() {
  if (structure_perception_ != nullptr) structure_perception_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::MetaData::StructurePerception& Data::structure_perception() const {
  const ::MetaData::StructurePerception* p = structure_perception_;
  // @@protoc_insertion_point(field_get:MetaData.Data.structure_perception)
  return p != nullptr ? *p : *reinterpret_cast<const ::MetaData::StructurePerception*>(
      &::MetaData::_StructurePerception_default_instance_);
}
inline ::MetaData::StructurePerception* Data::release_structure_perception() {
  // @@protoc_insertion_point(field_release:MetaData.Data.structure_perception)
  _has_bits_[0] &= ~0x00000001u;
  ::MetaData::StructurePerception* temp = structure_perception_;
  structure_perception_ = nullptr;
  return temp;
}
inline ::MetaData::StructurePerception* Data::mutable_structure_perception() {
  _has_bits_[0] |= 0x00000001u;
  if (structure_perception_ == nullptr) {
    auto* p = CreateMaybeMessage<::MetaData::StructurePerception>(GetArenaNoVirtual());
    structure_perception_ = p;
  }
  // @@protoc_insertion_point(field_mutable:MetaData.Data.structure_perception)
  return structure_perception_;
}
inline void Data::set_allocated_structure_perception(::MetaData::StructurePerception* structure_perception) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete structure_perception_;
  }
  if (structure_perception) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      structure_perception = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, structure_perception, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  structure_perception_ = structure_perception;
  // @@protoc_insertion_point(field_set_allocated:MetaData.Data.structure_perception)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace MetaData

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::MetaData::DataType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MetaData::DataType>() {
  return ::MetaData::DataType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_meta_5fdata_2eproto
