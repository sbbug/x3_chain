// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_common_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_common_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_common_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_common_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_common_2eproto;
namespace CommonProto {
class CameraMatrix;
class CameraMatrixDefaultTypeInternal;
extern CameraMatrixDefaultTypeInternal _CameraMatrix_default_instance_;
class CameraParam;
class CameraParamDefaultTypeInternal;
extern CameraParamDefaultTypeInternal _CameraParam_default_instance_;
class Color;
class ColorDefaultTypeInternal;
extern ColorDefaultTypeInternal _Color_default_instance_;
class DistortParam;
class DistortParamDefaultTypeInternal;
extern DistortParamDefaultTypeInternal _DistortParam_default_instance_;
class Image;
class ImageDefaultTypeInternal;
extern ImageDefaultTypeInternal _Image_default_instance_;
class ObstacleRaw;
class ObstacleRawDefaultTypeInternal;
extern ObstacleRawDefaultTypeInternal _ObstacleRaw_default_instance_;
class ObstacleRaws;
class ObstacleRawsDefaultTypeInternal;
extern ObstacleRawsDefaultTypeInternal _ObstacleRaws_default_instance_;
class ParsingSetting;
class ParsingSettingDefaultTypeInternal;
extern ParsingSettingDefaultTypeInternal _ParsingSetting_default_instance_;
class Rect;
class RectDefaultTypeInternal;
extern RectDefaultTypeInternal _Rect_default_instance_;
class VCSParam;
class VCSParamDefaultTypeInternal;
extern VCSParamDefaultTypeInternal _VCSParam_default_instance_;
}  // namespace CommonProto
PROTOBUF_NAMESPACE_OPEN
template<> ::CommonProto::CameraMatrix* Arena::CreateMaybeMessage<::CommonProto::CameraMatrix>(Arena*);
template<> ::CommonProto::CameraParam* Arena::CreateMaybeMessage<::CommonProto::CameraParam>(Arena*);
template<> ::CommonProto::Color* Arena::CreateMaybeMessage<::CommonProto::Color>(Arena*);
template<> ::CommonProto::DistortParam* Arena::CreateMaybeMessage<::CommonProto::DistortParam>(Arena*);
template<> ::CommonProto::Image* Arena::CreateMaybeMessage<::CommonProto::Image>(Arena*);
template<> ::CommonProto::ObstacleRaw* Arena::CreateMaybeMessage<::CommonProto::ObstacleRaw>(Arena*);
template<> ::CommonProto::ObstacleRaws* Arena::CreateMaybeMessage<::CommonProto::ObstacleRaws>(Arena*);
template<> ::CommonProto::ParsingSetting* Arena::CreateMaybeMessage<::CommonProto::ParsingSetting>(Arena*);
template<> ::CommonProto::Rect* Arena::CreateMaybeMessage<::CommonProto::Rect>(Arena*);
template<> ::CommonProto::VCSParam* Arena::CreateMaybeMessage<::CommonProto::VCSParam>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace CommonProto {

enum ImageFormat : int {
  GRAY = 0,
  YV12 = 1,
  JPEG = 2,
  PNG = 3,
  CR12 = 4,
  BAD = 5,
  NV12 = 6,
  NV21 = 7,
  TIMEOUT = 8
};
bool ImageFormat_IsValid(int value);
constexpr ImageFormat ImageFormat_MIN = GRAY;
constexpr ImageFormat ImageFormat_MAX = TIMEOUT;
constexpr int ImageFormat_ARRAYSIZE = ImageFormat_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ImageFormat_descriptor();
template<typename T>
inline const std::string& ImageFormat_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ImageFormat>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ImageFormat_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ImageFormat_descriptor(), enum_t_value);
}
inline bool ImageFormat_Parse(
    const std::string& name, ImageFormat* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ImageFormat>(
    ImageFormat_descriptor(), name, value);
}
enum ParsingFormat : int {
  ParsingFormat_Raw = 0,
  ParsingFormat_Label = 1,
  ParsingFormat_Label_RLE = 2
};
bool ParsingFormat_IsValid(int value);
constexpr ParsingFormat ParsingFormat_MIN = ParsingFormat_Raw;
constexpr ParsingFormat ParsingFormat_MAX = ParsingFormat_Label_RLE;
constexpr int ParsingFormat_ARRAYSIZE = ParsingFormat_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ParsingFormat_descriptor();
template<typename T>
inline const std::string& ParsingFormat_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ParsingFormat>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ParsingFormat_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ParsingFormat_descriptor(), enum_t_value);
}
inline bool ParsingFormat_Parse(
    const std::string& name, ParsingFormat* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ParsingFormat>(
    ParsingFormat_descriptor(), name, value);
}
enum ObstacleRawModelType : int {
  ObstacleRawModel_Car = 0,
  ObstacleRawModel_FullCar = 1,
  ObstacleRawModel_Ped = 2,
  ObstacleRawModel_Head = 3,
  ObstacleRawModel_Rare = 4,
  ObstacleRawModel_TrafficSign = 5,
  ObstacleRawModel_TrafficLight = 6,
  ObstacleRawModel_Lane = 7,
  ObstacleRawModel_RoadSign = 10,
  ObstacleRawModel_Cyclist = 16
};
bool ObstacleRawModelType_IsValid(int value);
constexpr ObstacleRawModelType ObstacleRawModelType_MIN = ObstacleRawModel_Car;
constexpr ObstacleRawModelType ObstacleRawModelType_MAX = ObstacleRawModel_Cyclist;
constexpr int ObstacleRawModelType_ARRAYSIZE = ObstacleRawModelType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ObstacleRawModelType_descriptor();
template<typename T>
inline const std::string& ObstacleRawModelType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ObstacleRawModelType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ObstacleRawModelType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ObstacleRawModelType_descriptor(), enum_t_value);
}
inline bool ObstacleRawModelType_Parse(
    const std::string& name, ObstacleRawModelType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ObstacleRawModelType>(
    ObstacleRawModelType_descriptor(), name, value);
}
enum CameraType : int {
  CameraType_PinHole = 0,
  CameraType_FishEye = 1
};
bool CameraType_IsValid(int value);
constexpr CameraType CameraType_MIN = CameraType_PinHole;
constexpr CameraType CameraType_MAX = CameraType_FishEye;
constexpr int CameraType_ARRAYSIZE = CameraType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CameraType_descriptor();
template<typename T>
inline const std::string& CameraType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CameraType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CameraType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CameraType_descriptor(), enum_t_value);
}
inline bool CameraType_Parse(
    const std::string& name, CameraType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CameraType>(
    CameraType_descriptor(), name, value);
}
// ===================================================================

class Rect :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CommonProto.Rect) */ {
 public:
  Rect();
  virtual ~Rect();

  Rect(const Rect& from);
  Rect(Rect&& from) noexcept
    : Rect() {
    *this = ::std::move(from);
  }

  inline Rect& operator=(const Rect& from) {
    CopyFrom(from);
    return *this;
  }
  inline Rect& operator=(Rect&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Rect& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rect* internal_default_instance() {
    return reinterpret_cast<const Rect*>(
               &_Rect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Rect* other);
  friend void swap(Rect& a, Rect& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rect* New() const final {
    return CreateMaybeMessage<Rect>(nullptr);
  }

  Rect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Rect>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Rect& from);
  void MergeFrom(const Rect& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rect* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CommonProto.Rect";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float left = 1;
  bool has_left() const;
  void clear_left();
  static const int kLeftFieldNumber = 1;
  float left() const;
  void set_left(float value);

  // required float top = 2;
  bool has_top() const;
  void clear_top();
  static const int kTopFieldNumber = 2;
  float top() const;
  void set_top(float value);

  // required float right = 3;
  bool has_right() const;
  void clear_right();
  static const int kRightFieldNumber = 3;
  float right() const;
  void set_right(float value);

  // required float bottom = 4;
  bool has_bottom() const;
  void clear_bottom();
  static const int kBottomFieldNumber = 4;
  float bottom() const;
  void set_bottom(float value);

  // @@protoc_insertion_point(class_scope:CommonProto.Rect)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float left_;
  float top_;
  float right_;
  float bottom_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class Image :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CommonProto.Image) */ {
 public:
  Image();
  virtual ~Image();

  Image(const Image& from);
  Image(Image&& from) noexcept
    : Image() {
    *this = ::std::move(from);
  }

  inline Image& operator=(const Image& from) {
    CopyFrom(from);
    return *this;
  }
  inline Image& operator=(Image&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Image& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Image* internal_default_instance() {
    return reinterpret_cast<const Image*>(
               &_Image_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Image* other);
  friend void swap(Image& a, Image& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Image* New() const final {
    return CreateMaybeMessage<Image>(nullptr);
  }

  Image* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Image>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Image& from);
  void MergeFrom(const Image& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Image* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CommonProto.Image";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 width = 1;
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required int32 height = 2;
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int64 time_stamp = 4;
  bool has_time_stamp() const;
  void clear_time_stamp();
  static const int kTimeStampFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int64 time_stamp() const;
  void set_time_stamp(::PROTOBUF_NAMESPACE_ID::int64 value);

  // required int32 channel = 3;
  bool has_channel() const;
  void clear_channel();
  static const int kChannelFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 channel() const;
  void set_channel(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 send_mode = 5;
  bool has_send_mode() const;
  void clear_send_mode();
  static const int kSendModeFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::int32 send_mode() const;
  void set_send_mode(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 format = 6;
  bool has_format() const;
  void clear_format();
  static const int kFormatFieldNumber = 6;
  ::PROTOBUF_NAMESPACE_ID::int32 format() const;
  void set_format(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 index = 7;
  bool has_index() const;
  void clear_index();
  static const int kIndexFieldNumber = 7;
  ::PROTOBUF_NAMESPACE_ID::int32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 count = 8;
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 8;
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 depth = 9;
  bool has_depth() const;
  void clear_depth();
  static const int kDepthFieldNumber = 9;
  ::PROTOBUF_NAMESPACE_ID::int32 depth() const;
  void set_depth(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 align = 10;
  bool has_align() const;
  void clear_align();
  static const int kAlignFieldNumber = 10;
  ::PROTOBUF_NAMESPACE_ID::int32 align() const;
  void set_align(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:CommonProto.Image)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_stamp_;
  ::PROTOBUF_NAMESPACE_ID::int32 channel_;
  ::PROTOBUF_NAMESPACE_ID::int32 send_mode_;
  ::PROTOBUF_NAMESPACE_ID::int32 format_;
  ::PROTOBUF_NAMESPACE_ID::int32 index_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  ::PROTOBUF_NAMESPACE_ID::int32 depth_;
  ::PROTOBUF_NAMESPACE_ID::int32 align_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class ObstacleRaw :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CommonProto.ObstacleRaw) */ {
 public:
  ObstacleRaw();
  virtual ~ObstacleRaw();

  ObstacleRaw(const ObstacleRaw& from);
  ObstacleRaw(ObstacleRaw&& from) noexcept
    : ObstacleRaw() {
    *this = ::std::move(from);
  }

  inline ObstacleRaw& operator=(const ObstacleRaw& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObstacleRaw& operator=(ObstacleRaw&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ObstacleRaw& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObstacleRaw* internal_default_instance() {
    return reinterpret_cast<const ObstacleRaw*>(
               &_ObstacleRaw_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ObstacleRaw* other);
  friend void swap(ObstacleRaw& a, ObstacleRaw& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ObstacleRaw* New() const final {
    return CreateMaybeMessage<ObstacleRaw>(nullptr);
  }

  ObstacleRaw* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObstacleRaw>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObstacleRaw& from);
  void MergeFrom(const ObstacleRaw& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObstacleRaw* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CommonProto.ObstacleRaw";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 property = 6;
  int property_size() const;
  void clear_property();
  static const int kPropertyFieldNumber = 6;
  ::PROTOBUF_NAMESPACE_ID::int32 property(int index) const;
  void set_property(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_property(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      property() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_property();

  // repeated string property_name = 7;
  int property_name_size() const;
  void clear_property_name();
  static const int kPropertyNameFieldNumber = 7;
  const std::string& property_name(int index) const;
  std::string* mutable_property_name(int index);
  void set_property_name(int index, const std::string& value);
  void set_property_name(int index, std::string&& value);
  void set_property_name(int index, const char* value);
  void set_property_name(int index, const char* value, size_t size);
  std::string* add_property_name();
  void add_property_name(const std::string& value);
  void add_property_name(std::string&& value);
  void add_property_name(const char* value);
  void add_property_name(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& property_name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_property_name();

  // repeated int32 property_type = 8;
  int property_type_size() const;
  void clear_property_type();
  static const int kPropertyTypeFieldNumber = 8;
  ::PROTOBUF_NAMESPACE_ID::int32 property_type(int index) const;
  void set_property_type(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_property_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      property_type() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_property_type();

  // required .CommonProto.Rect rect = 1;
  bool has_rect() const;
  void clear_rect();
  static const int kRectFieldNumber = 1;
  const ::CommonProto::Rect& rect() const;
  ::CommonProto::Rect* release_rect();
  ::CommonProto::Rect* mutable_rect();
  void set_allocated_rect(::CommonProto::Rect* rect);

  // required float conf = 2;
  bool has_conf() const;
  void clear_conf();
  static const int kConfFieldNumber = 2;
  float conf() const;
  void set_conf(float value);

  // required int32 model = 3;
  bool has_model() const;
  void clear_model();
  static const int kModelFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 model() const;
  void set_model(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 source = 4;
  bool has_source() const;
  void clear_source();
  static const int kSourceFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int32 source() const;
  void set_source(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:CommonProto.ObstacleRaw)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > property_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> property_name_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > property_type_;
  ::CommonProto::Rect* rect_;
  float conf_;
  ::PROTOBUF_NAMESPACE_ID::int32 model_;
  ::PROTOBUF_NAMESPACE_ID::int32 source_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class ObstacleRaws :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CommonProto.ObstacleRaws) */ {
 public:
  ObstacleRaws();
  virtual ~ObstacleRaws();

  ObstacleRaws(const ObstacleRaws& from);
  ObstacleRaws(ObstacleRaws&& from) noexcept
    : ObstacleRaws() {
    *this = ::std::move(from);
  }

  inline ObstacleRaws& operator=(const ObstacleRaws& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObstacleRaws& operator=(ObstacleRaws&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ObstacleRaws& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObstacleRaws* internal_default_instance() {
    return reinterpret_cast<const ObstacleRaws*>(
               &_ObstacleRaws_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ObstacleRaws* other);
  friend void swap(ObstacleRaws& a, ObstacleRaws& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ObstacleRaws* New() const final {
    return CreateMaybeMessage<ObstacleRaws>(nullptr);
  }

  ObstacleRaws* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObstacleRaws>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObstacleRaws& from);
  void MergeFrom(const ObstacleRaws& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObstacleRaws* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CommonProto.ObstacleRaws";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CommonProto.ObstacleRaw obstacle = 2;
  int obstacle_size() const;
  void clear_obstacle();
  static const int kObstacleFieldNumber = 2;
  ::CommonProto::ObstacleRaw* mutable_obstacle(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::ObstacleRaw >*
      mutable_obstacle();
  const ::CommonProto::ObstacleRaw& obstacle(int index) const;
  ::CommonProto::ObstacleRaw* add_obstacle();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::ObstacleRaw >&
      obstacle() const;

  // optional int32 cam_id = 1;
  bool has_cam_id() const;
  void clear_cam_id();
  static const int kCamIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 cam_id() const;
  void set_cam_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional float conf_scale = 3 [default = 0.1];
  bool has_conf_scale() const;
  void clear_conf_scale();
  static const int kConfScaleFieldNumber = 3;
  float conf_scale() const;
  void set_conf_scale(float value);

  // @@protoc_insertion_point(class_scope:CommonProto.ObstacleRaws)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::ObstacleRaw > obstacle_;
  ::PROTOBUF_NAMESPACE_ID::int32 cam_id_;
  float conf_scale_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CameraMatrix :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CommonProto.CameraMatrix) */ {
 public:
  CameraMatrix();
  virtual ~CameraMatrix();

  CameraMatrix(const CameraMatrix& from);
  CameraMatrix(CameraMatrix&& from) noexcept
    : CameraMatrix() {
    *this = ::std::move(from);
  }

  inline CameraMatrix& operator=(const CameraMatrix& from) {
    CopyFrom(from);
    return *this;
  }
  inline CameraMatrix& operator=(CameraMatrix&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CameraMatrix& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CameraMatrix* internal_default_instance() {
    return reinterpret_cast<const CameraMatrix*>(
               &_CameraMatrix_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(CameraMatrix* other);
  friend void swap(CameraMatrix& a, CameraMatrix& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CameraMatrix* New() const final {
    return CreateMaybeMessage<CameraMatrix>(nullptr);
  }

  CameraMatrix* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CameraMatrix>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CameraMatrix& from);
  void MergeFrom(const CameraMatrix& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CameraMatrix* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CommonProto.CameraMatrix";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float mat_gnd2img = 1;
  int mat_gnd2img_size() const;
  void clear_mat_gnd2img();
  static const int kMatGnd2ImgFieldNumber = 1;
  float mat_gnd2img(int index) const;
  void set_mat_gnd2img(int index, float value);
  void add_mat_gnd2img(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      mat_gnd2img() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_mat_gnd2img();

  // repeated float mat_img2gnd = 2;
  int mat_img2gnd_size() const;
  void clear_mat_img2gnd();
  static const int kMatImg2GndFieldNumber = 2;
  float mat_img2gnd(int index) const;
  void set_mat_img2gnd(int index, float value);
  void add_mat_img2gnd(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      mat_img2gnd() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_mat_img2gnd();

  // repeated float mat_vcsgnd2img = 3;
  int mat_vcsgnd2img_size() const;
  void clear_mat_vcsgnd2img();
  static const int kMatVcsgnd2ImgFieldNumber = 3;
  float mat_vcsgnd2img(int index) const;
  void set_mat_vcsgnd2img(int index, float value);
  void add_mat_vcsgnd2img(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      mat_vcsgnd2img() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_mat_vcsgnd2img();

  // repeated float mat_img2vcsgnd = 4;
  int mat_img2vcsgnd_size() const;
  void clear_mat_img2vcsgnd();
  static const int kMatImg2VcsgndFieldNumber = 4;
  float mat_img2vcsgnd(int index) const;
  void set_mat_img2vcsgnd(int index, float value);
  void add_mat_img2vcsgnd(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      mat_img2vcsgnd() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_mat_img2vcsgnd();

  // @@protoc_insertion_point(class_scope:CommonProto.CameraMatrix)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > mat_gnd2img_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > mat_img2gnd_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > mat_vcsgnd2img_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > mat_img2vcsgnd_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class DistortParam :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CommonProto.DistortParam) */ {
 public:
  DistortParam();
  virtual ~DistortParam();

  DistortParam(const DistortParam& from);
  DistortParam(DistortParam&& from) noexcept
    : DistortParam() {
    *this = ::std::move(from);
  }

  inline DistortParam& operator=(const DistortParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline DistortParam& operator=(DistortParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DistortParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DistortParam* internal_default_instance() {
    return reinterpret_cast<const DistortParam*>(
               &_DistortParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(DistortParam* other);
  friend void swap(DistortParam& a, DistortParam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DistortParam* New() const final {
    return CreateMaybeMessage<DistortParam>(nullptr);
  }

  DistortParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DistortParam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DistortParam& from);
  void MergeFrom(const DistortParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DistortParam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CommonProto.DistortParam";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float param = 1;
  int param_size() const;
  void clear_param();
  static const int kParamFieldNumber = 1;
  float param(int index) const;
  void set_param(int index, float value);
  void add_param(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      param() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_param();

  // @@protoc_insertion_point(class_scope:CommonProto.DistortParam)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > param_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class VCSParam :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CommonProto.VCSParam) */ {
 public:
  VCSParam();
  virtual ~VCSParam();

  VCSParam(const VCSParam& from);
  VCSParam(VCSParam&& from) noexcept
    : VCSParam() {
    *this = ::std::move(from);
  }

  inline VCSParam& operator=(const VCSParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline VCSParam& operator=(VCSParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VCSParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VCSParam* internal_default_instance() {
    return reinterpret_cast<const VCSParam*>(
               &_VCSParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(VCSParam* other);
  friend void swap(VCSParam& a, VCSParam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VCSParam* New() const final {
    return CreateMaybeMessage<VCSParam>(nullptr);
  }

  VCSParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VCSParam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VCSParam& from);
  void MergeFrom(const VCSParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VCSParam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CommonProto.VCSParam";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float rotation = 1;
  int rotation_size() const;
  void clear_rotation();
  static const int kRotationFieldNumber = 1;
  float rotation(int index) const;
  void set_rotation(int index, float value);
  void add_rotation(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      rotation() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_rotation();

  // repeated float translation = 2;
  int translation_size() const;
  void clear_translation();
  static const int kTranslationFieldNumber = 2;
  float translation(int index) const;
  void set_translation(int index, float value);
  void add_translation(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      translation() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_translation();

  // @@protoc_insertion_point(class_scope:CommonProto.VCSParam)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > rotation_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > translation_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CameraParam :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CommonProto.CameraParam) */ {
 public:
  CameraParam();
  virtual ~CameraParam();

  CameraParam(const CameraParam& from);
  CameraParam(CameraParam&& from) noexcept
    : CameraParam() {
    *this = ::std::move(from);
  }

  inline CameraParam& operator=(const CameraParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline CameraParam& operator=(CameraParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CameraParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CameraParam* internal_default_instance() {
    return reinterpret_cast<const CameraParam*>(
               &_CameraParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(CameraParam* other);
  friend void swap(CameraParam& a, CameraParam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CameraParam* New() const final {
    return CreateMaybeMessage<CameraParam>(nullptr);
  }

  CameraParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CameraParam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CameraParam& from);
  void MergeFrom(const CameraParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CameraParam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CommonProto.CameraParam";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CommonProto.DistortParam distort = 20;
  bool has_distort() const;
  void clear_distort();
  static const int kDistortFieldNumber = 20;
  const ::CommonProto::DistortParam& distort() const;
  ::CommonProto::DistortParam* release_distort();
  ::CommonProto::DistortParam* mutable_distort();
  void set_allocated_distort(::CommonProto::DistortParam* distort);

  // optional .CommonProto.VCSParam vcs = 21;
  bool has_vcs() const;
  void clear_vcs();
  static const int kVcsFieldNumber = 21;
  const ::CommonProto::VCSParam& vcs() const;
  ::CommonProto::VCSParam* release_vcs();
  ::CommonProto::VCSParam* mutable_vcs();
  void set_allocated_vcs(::CommonProto::VCSParam* vcs);

  // optional .CommonProto.CameraMatrix mat = 30;
  bool has_mat() const;
  void clear_mat();
  static const int kMatFieldNumber = 30;
  const ::CommonProto::CameraMatrix& mat() const;
  ::CommonProto::CameraMatrix* release_mat();
  ::CommonProto::CameraMatrix* mutable_mat();
  void set_allocated_mat(::CommonProto::CameraMatrix* mat);

  // required float focal_u = 1;
  bool has_focal_u() const;
  void clear_focal_u();
  static const int kFocalUFieldNumber = 1;
  float focal_u() const;
  void set_focal_u(float value);

  // required float focal_v = 2;
  bool has_focal_v() const;
  void clear_focal_v();
  static const int kFocalVFieldNumber = 2;
  float focal_v() const;
  void set_focal_v(float value);

  // required float center_u = 3;
  bool has_center_u() const;
  void clear_center_u();
  static const int kCenterUFieldNumber = 3;
  float center_u() const;
  void set_center_u(float value);

  // required float center_v = 4;
  bool has_center_v() const;
  void clear_center_v();
  static const int kCenterVFieldNumber = 4;
  float center_v() const;
  void set_center_v(float value);

  // required float camera_x = 5;
  bool has_camera_x() const;
  void clear_camera_x();
  static const int kCameraXFieldNumber = 5;
  float camera_x() const;
  void set_camera_x(float value);

  // required float camera_y = 6;
  bool has_camera_y() const;
  void clear_camera_y();
  static const int kCameraYFieldNumber = 6;
  float camera_y() const;
  void set_camera_y(float value);

  // required float camera_z = 7;
  bool has_camera_z() const;
  void clear_camera_z();
  static const int kCameraZFieldNumber = 7;
  float camera_z() const;
  void set_camera_z(float value);

  // required float pitch = 8;
  bool has_pitch() const;
  void clear_pitch();
  static const int kPitchFieldNumber = 8;
  float pitch() const;
  void set_pitch(float value);

  // required float yaw = 9;
  bool has_yaw() const;
  void clear_yaw();
  static const int kYawFieldNumber = 9;
  float yaw() const;
  void set_yaw(float value);

  // required float roll = 10;
  bool has_roll() const;
  void clear_roll();
  static const int kRollFieldNumber = 10;
  float roll() const;
  void set_roll(float value);

  // optional int32 type = 11 [default = 0];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 11;
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional float fov = 12;
  bool has_fov() const;
  void clear_fov();
  static const int kFovFieldNumber = 12;
  float fov() const;
  void set_fov(float value);

  // @@protoc_insertion_point(class_scope:CommonProto.CameraParam)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CommonProto::DistortParam* distort_;
  ::CommonProto::VCSParam* vcs_;
  ::CommonProto::CameraMatrix* mat_;
  float focal_u_;
  float focal_v_;
  float center_u_;
  float center_v_;
  float camera_x_;
  float camera_y_;
  float camera_z_;
  float pitch_;
  float yaw_;
  float roll_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  float fov_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class Color :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CommonProto.Color) */ {
 public:
  Color();
  virtual ~Color();

  Color(const Color& from);
  Color(Color&& from) noexcept
    : Color() {
    *this = ::std::move(from);
  }

  inline Color& operator=(const Color& from) {
    CopyFrom(from);
    return *this;
  }
  inline Color& operator=(Color&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Color& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Color* internal_default_instance() {
    return reinterpret_cast<const Color*>(
               &_Color_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(Color* other);
  friend void swap(Color& a, Color& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Color* New() const final {
    return CreateMaybeMessage<Color>(nullptr);
  }

  Color* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Color>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Color& from);
  void MergeFrom(const Color& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Color* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CommonProto.Color";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 b = 1;
  bool has_b() const;
  void clear_b();
  static const int kBFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 b() const;
  void set_b(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // required uint32 g = 2;
  bool has_g() const;
  void clear_g();
  static const int kGFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint32 g() const;
  void set_g(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // required uint32 r = 3;
  bool has_r() const;
  void clear_r();
  static const int kRFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::uint32 r() const;
  void set_r(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:CommonProto.Color)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 b_;
  ::PROTOBUF_NAMESPACE_ID::uint32 g_;
  ::PROTOBUF_NAMESPACE_ID::uint32 r_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class ParsingSetting :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CommonProto.ParsingSetting) */ {
 public:
  ParsingSetting();
  virtual ~ParsingSetting();

  ParsingSetting(const ParsingSetting& from);
  ParsingSetting(ParsingSetting&& from) noexcept
    : ParsingSetting() {
    *this = ::std::move(from);
  }

  inline ParsingSetting& operator=(const ParsingSetting& from) {
    CopyFrom(from);
    return *this;
  }
  inline ParsingSetting& operator=(ParsingSetting&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ParsingSetting& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ParsingSetting* internal_default_instance() {
    return reinterpret_cast<const ParsingSetting*>(
               &_ParsingSetting_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(ParsingSetting* other);
  friend void swap(ParsingSetting& a, ParsingSetting& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ParsingSetting* New() const final {
    return CreateMaybeMessage<ParsingSetting>(nullptr);
  }

  ParsingSetting* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ParsingSetting>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ParsingSetting& from);
  void MergeFrom(const ParsingSetting& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ParsingSetting* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CommonProto.ParsingSetting";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 channel_labels = 3;
  int channel_labels_size() const;
  void clear_channel_labels();
  static const int kChannelLabelsFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::uint64 channel_labels(int index) const;
  void set_channel_labels(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_channel_labels(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      channel_labels() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_channel_labels();

  // repeated .CommonProto.Color channel_colors = 4;
  int channel_colors_size() const;
  void clear_channel_colors();
  static const int kChannelColorsFieldNumber = 4;
  ::CommonProto::Color* mutable_channel_colors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::Color >*
      mutable_channel_colors();
  const ::CommonProto::Color& channel_colors(int index) const;
  ::CommonProto::Color* add_channel_colors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::Color >&
      channel_colors() const;

  // repeated int32 freespace_channels = 5;
  int freespace_channels_size() const;
  void clear_freespace_channels();
  static const int kFreespaceChannelsFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::int32 freespace_channels(int index) const;
  void set_freespace_channels(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_freespace_channels(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      freespace_channels() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_freespace_channels();

  // repeated int32 boundspace_channels = 6;
  int boundspace_channels_size() const;
  void clear_boundspace_channels();
  static const int kBoundspaceChannelsFieldNumber = 6;
  ::PROTOBUF_NAMESPACE_ID::int32 boundspace_channels(int index) const;
  void set_boundspace_channels(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_boundspace_channels(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      boundspace_channels() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_boundspace_channels();

  // required int32 parsing_type = 1;
  bool has_parsing_type() const;
  void clear_parsing_type();
  static const int kParsingTypeFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 parsing_type() const;
  void set_parsing_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required int32 parsing_channels = 2;
  bool has_parsing_channels() const;
  void clear_parsing_channels();
  static const int kParsingChannelsFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 parsing_channels() const;
  void set_parsing_channels(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:CommonProto.ParsingSetting)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > channel_labels_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::Color > channel_colors_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > freespace_channels_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > boundspace_channels_;
  ::PROTOBUF_NAMESPACE_ID::int32 parsing_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 parsing_channels_;
  friend struct ::TableStruct_common_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Rect

// required float left = 1;
inline bool Rect::has_left() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Rect::clear_left() {
  left_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float Rect::left() const {
  // @@protoc_insertion_point(field_get:CommonProto.Rect.left)
  return left_;
}
inline void Rect::set_left(float value) {
  _has_bits_[0] |= 0x00000001u;
  left_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.Rect.left)
}

// required float top = 2;
inline bool Rect::has_top() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Rect::clear_top() {
  top_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float Rect::top() const {
  // @@protoc_insertion_point(field_get:CommonProto.Rect.top)
  return top_;
}
inline void Rect::set_top(float value) {
  _has_bits_[0] |= 0x00000002u;
  top_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.Rect.top)
}

// required float right = 3;
inline bool Rect::has_right() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Rect::clear_right() {
  right_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float Rect::right() const {
  // @@protoc_insertion_point(field_get:CommonProto.Rect.right)
  return right_;
}
inline void Rect::set_right(float value) {
  _has_bits_[0] |= 0x00000004u;
  right_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.Rect.right)
}

// required float bottom = 4;
inline bool Rect::has_bottom() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Rect::clear_bottom() {
  bottom_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float Rect::bottom() const {
  // @@protoc_insertion_point(field_get:CommonProto.Rect.bottom)
  return bottom_;
}
inline void Rect::set_bottom(float value) {
  _has_bits_[0] |= 0x00000008u;
  bottom_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.Rect.bottom)
}

// -------------------------------------------------------------------

// Image

// required int32 width = 1;
inline bool Image::has_width() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Image::clear_width() {
  width_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Image::width() const {
  // @@protoc_insertion_point(field_get:CommonProto.Image.width)
  return width_;
}
inline void Image::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  width_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.Image.width)
}

// required int32 height = 2;
inline bool Image::has_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Image::clear_height() {
  height_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Image::height() const {
  // @@protoc_insertion_point(field_get:CommonProto.Image.height)
  return height_;
}
inline void Image::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  height_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.Image.height)
}

// required int32 channel = 3;
inline bool Image::has_channel() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Image::clear_channel() {
  channel_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Image::channel() const {
  // @@protoc_insertion_point(field_get:CommonProto.Image.channel)
  return channel_;
}
inline void Image::set_channel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  channel_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.Image.channel)
}

// optional int64 time_stamp = 4;
inline bool Image::has_time_stamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Image::clear_time_stamp() {
  time_stamp_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Image::time_stamp() const {
  // @@protoc_insertion_point(field_get:CommonProto.Image.time_stamp)
  return time_stamp_;
}
inline void Image::set_time_stamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  time_stamp_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.Image.time_stamp)
}

// optional int32 send_mode = 5;
inline bool Image::has_send_mode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Image::clear_send_mode() {
  send_mode_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Image::send_mode() const {
  // @@protoc_insertion_point(field_get:CommonProto.Image.send_mode)
  return send_mode_;
}
inline void Image::set_send_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  send_mode_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.Image.send_mode)
}

// optional int32 format = 6;
inline bool Image::has_format() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Image::clear_format() {
  format_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Image::format() const {
  // @@protoc_insertion_point(field_get:CommonProto.Image.format)
  return format_;
}
inline void Image::set_format(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  format_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.Image.format)
}

// optional int32 index = 7;
inline bool Image::has_index() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Image::clear_index() {
  index_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Image::index() const {
  // @@protoc_insertion_point(field_get:CommonProto.Image.index)
  return index_;
}
inline void Image::set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  index_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.Image.index)
}

// optional int32 count = 8;
inline bool Image::has_count() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Image::clear_count() {
  count_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Image::count() const {
  // @@protoc_insertion_point(field_get:CommonProto.Image.count)
  return count_;
}
inline void Image::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  count_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.Image.count)
}

// optional int32 depth = 9;
inline bool Image::has_depth() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Image::clear_depth() {
  depth_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Image::depth() const {
  // @@protoc_insertion_point(field_get:CommonProto.Image.depth)
  return depth_;
}
inline void Image::set_depth(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  depth_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.Image.depth)
}

// optional int32 align = 10;
inline bool Image::has_align() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Image::clear_align() {
  align_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Image::align() const {
  // @@protoc_insertion_point(field_get:CommonProto.Image.align)
  return align_;
}
inline void Image::set_align(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  align_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.Image.align)
}

// -------------------------------------------------------------------

// ObstacleRaw

// required .CommonProto.Rect rect = 1;
inline bool ObstacleRaw::has_rect() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ObstacleRaw::clear_rect() {
  if (rect_ != nullptr) rect_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CommonProto::Rect& ObstacleRaw::rect() const {
  const ::CommonProto::Rect* p = rect_;
  // @@protoc_insertion_point(field_get:CommonProto.ObstacleRaw.rect)
  return p != nullptr ? *p : *reinterpret_cast<const ::CommonProto::Rect*>(
      &::CommonProto::_Rect_default_instance_);
}
inline ::CommonProto::Rect* ObstacleRaw::release_rect() {
  // @@protoc_insertion_point(field_release:CommonProto.ObstacleRaw.rect)
  _has_bits_[0] &= ~0x00000001u;
  ::CommonProto::Rect* temp = rect_;
  rect_ = nullptr;
  return temp;
}
inline ::CommonProto::Rect* ObstacleRaw::mutable_rect() {
  _has_bits_[0] |= 0x00000001u;
  if (rect_ == nullptr) {
    auto* p = CreateMaybeMessage<::CommonProto::Rect>(GetArenaNoVirtual());
    rect_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CommonProto.ObstacleRaw.rect)
  return rect_;
}
inline void ObstacleRaw::set_allocated_rect(::CommonProto::Rect* rect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete rect_;
  }
  if (rect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rect, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  rect_ = rect;
  // @@protoc_insertion_point(field_set_allocated:CommonProto.ObstacleRaw.rect)
}

// required float conf = 2;
inline bool ObstacleRaw::has_conf() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ObstacleRaw::clear_conf() {
  conf_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float ObstacleRaw::conf() const {
  // @@protoc_insertion_point(field_get:CommonProto.ObstacleRaw.conf)
  return conf_;
}
inline void ObstacleRaw::set_conf(float value) {
  _has_bits_[0] |= 0x00000002u;
  conf_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.ObstacleRaw.conf)
}

// required int32 model = 3;
inline bool ObstacleRaw::has_model() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ObstacleRaw::clear_model() {
  model_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ObstacleRaw::model() const {
  // @@protoc_insertion_point(field_get:CommonProto.ObstacleRaw.model)
  return model_;
}
inline void ObstacleRaw::set_model(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  model_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.ObstacleRaw.model)
}

// optional int32 source = 4;
inline bool ObstacleRaw::has_source() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ObstacleRaw::clear_source() {
  source_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ObstacleRaw::source() const {
  // @@protoc_insertion_point(field_get:CommonProto.ObstacleRaw.source)
  return source_;
}
inline void ObstacleRaw::set_source(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  source_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.ObstacleRaw.source)
}

// repeated int32 property = 6;
inline int ObstacleRaw::property_size() const {
  return property_.size();
}
inline void ObstacleRaw::clear_property() {
  property_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ObstacleRaw::property(int index) const {
  // @@protoc_insertion_point(field_get:CommonProto.ObstacleRaw.property)
  return property_.Get(index);
}
inline void ObstacleRaw::set_property(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  property_.Set(index, value);
  // @@protoc_insertion_point(field_set:CommonProto.ObstacleRaw.property)
}
inline void ObstacleRaw::add_property(::PROTOBUF_NAMESPACE_ID::int32 value) {
  property_.Add(value);
  // @@protoc_insertion_point(field_add:CommonProto.ObstacleRaw.property)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
ObstacleRaw::property() const {
  // @@protoc_insertion_point(field_list:CommonProto.ObstacleRaw.property)
  return property_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
ObstacleRaw::mutable_property() {
  // @@protoc_insertion_point(field_mutable_list:CommonProto.ObstacleRaw.property)
  return &property_;
}

// repeated string property_name = 7;
inline int ObstacleRaw::property_name_size() const {
  return property_name_.size();
}
inline void ObstacleRaw::clear_property_name() {
  property_name_.Clear();
}
inline const std::string& ObstacleRaw::property_name(int index) const {
  // @@protoc_insertion_point(field_get:CommonProto.ObstacleRaw.property_name)
  return property_name_.Get(index);
}
inline std::string* ObstacleRaw::mutable_property_name(int index) {
  // @@protoc_insertion_point(field_mutable:CommonProto.ObstacleRaw.property_name)
  return property_name_.Mutable(index);
}
inline void ObstacleRaw::set_property_name(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:CommonProto.ObstacleRaw.property_name)
  property_name_.Mutable(index)->assign(value);
}
inline void ObstacleRaw::set_property_name(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:CommonProto.ObstacleRaw.property_name)
  property_name_.Mutable(index)->assign(std::move(value));
}
inline void ObstacleRaw::set_property_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  property_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CommonProto.ObstacleRaw.property_name)
}
inline void ObstacleRaw::set_property_name(int index, const char* value, size_t size) {
  property_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CommonProto.ObstacleRaw.property_name)
}
inline std::string* ObstacleRaw::add_property_name() {
  // @@protoc_insertion_point(field_add_mutable:CommonProto.ObstacleRaw.property_name)
  return property_name_.Add();
}
inline void ObstacleRaw::add_property_name(const std::string& value) {
  property_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CommonProto.ObstacleRaw.property_name)
}
inline void ObstacleRaw::add_property_name(std::string&& value) {
  property_name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CommonProto.ObstacleRaw.property_name)
}
inline void ObstacleRaw::add_property_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  property_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CommonProto.ObstacleRaw.property_name)
}
inline void ObstacleRaw::add_property_name(const char* value, size_t size) {
  property_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CommonProto.ObstacleRaw.property_name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ObstacleRaw::property_name() const {
  // @@protoc_insertion_point(field_list:CommonProto.ObstacleRaw.property_name)
  return property_name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ObstacleRaw::mutable_property_name() {
  // @@protoc_insertion_point(field_mutable_list:CommonProto.ObstacleRaw.property_name)
  return &property_name_;
}

// repeated int32 property_type = 8;
inline int ObstacleRaw::property_type_size() const {
  return property_type_.size();
}
inline void ObstacleRaw::clear_property_type() {
  property_type_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ObstacleRaw::property_type(int index) const {
  // @@protoc_insertion_point(field_get:CommonProto.ObstacleRaw.property_type)
  return property_type_.Get(index);
}
inline void ObstacleRaw::set_property_type(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  property_type_.Set(index, value);
  // @@protoc_insertion_point(field_set:CommonProto.ObstacleRaw.property_type)
}
inline void ObstacleRaw::add_property_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  property_type_.Add(value);
  // @@protoc_insertion_point(field_add:CommonProto.ObstacleRaw.property_type)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
ObstacleRaw::property_type() const {
  // @@protoc_insertion_point(field_list:CommonProto.ObstacleRaw.property_type)
  return property_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
ObstacleRaw::mutable_property_type() {
  // @@protoc_insertion_point(field_mutable_list:CommonProto.ObstacleRaw.property_type)
  return &property_type_;
}

// -------------------------------------------------------------------

// ObstacleRaws

// optional int32 cam_id = 1;
inline bool ObstacleRaws::has_cam_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ObstacleRaws::clear_cam_id() {
  cam_id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ObstacleRaws::cam_id() const {
  // @@protoc_insertion_point(field_get:CommonProto.ObstacleRaws.cam_id)
  return cam_id_;
}
inline void ObstacleRaws::set_cam_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  cam_id_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.ObstacleRaws.cam_id)
}

// repeated .CommonProto.ObstacleRaw obstacle = 2;
inline int ObstacleRaws::obstacle_size() const {
  return obstacle_.size();
}
inline void ObstacleRaws::clear_obstacle() {
  obstacle_.Clear();
}
inline ::CommonProto::ObstacleRaw* ObstacleRaws::mutable_obstacle(int index) {
  // @@protoc_insertion_point(field_mutable:CommonProto.ObstacleRaws.obstacle)
  return obstacle_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::ObstacleRaw >*
ObstacleRaws::mutable_obstacle() {
  // @@protoc_insertion_point(field_mutable_list:CommonProto.ObstacleRaws.obstacle)
  return &obstacle_;
}
inline const ::CommonProto::ObstacleRaw& ObstacleRaws::obstacle(int index) const {
  // @@protoc_insertion_point(field_get:CommonProto.ObstacleRaws.obstacle)
  return obstacle_.Get(index);
}
inline ::CommonProto::ObstacleRaw* ObstacleRaws::add_obstacle() {
  // @@protoc_insertion_point(field_add:CommonProto.ObstacleRaws.obstacle)
  return obstacle_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::ObstacleRaw >&
ObstacleRaws::obstacle() const {
  // @@protoc_insertion_point(field_list:CommonProto.ObstacleRaws.obstacle)
  return obstacle_;
}

// optional float conf_scale = 3 [default = 0.1];
inline bool ObstacleRaws::has_conf_scale() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ObstacleRaws::clear_conf_scale() {
  conf_scale_ = 0.1f;
  _has_bits_[0] &= ~0x00000002u;
}
inline float ObstacleRaws::conf_scale() const {
  // @@protoc_insertion_point(field_get:CommonProto.ObstacleRaws.conf_scale)
  return conf_scale_;
}
inline void ObstacleRaws::set_conf_scale(float value) {
  _has_bits_[0] |= 0x00000002u;
  conf_scale_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.ObstacleRaws.conf_scale)
}

// -------------------------------------------------------------------

// CameraMatrix

// repeated float mat_gnd2img = 1;
inline int CameraMatrix::mat_gnd2img_size() const {
  return mat_gnd2img_.size();
}
inline void CameraMatrix::clear_mat_gnd2img() {
  mat_gnd2img_.Clear();
}
inline float CameraMatrix::mat_gnd2img(int index) const {
  // @@protoc_insertion_point(field_get:CommonProto.CameraMatrix.mat_gnd2img)
  return mat_gnd2img_.Get(index);
}
inline void CameraMatrix::set_mat_gnd2img(int index, float value) {
  mat_gnd2img_.Set(index, value);
  // @@protoc_insertion_point(field_set:CommonProto.CameraMatrix.mat_gnd2img)
}
inline void CameraMatrix::add_mat_gnd2img(float value) {
  mat_gnd2img_.Add(value);
  // @@protoc_insertion_point(field_add:CommonProto.CameraMatrix.mat_gnd2img)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CameraMatrix::mat_gnd2img() const {
  // @@protoc_insertion_point(field_list:CommonProto.CameraMatrix.mat_gnd2img)
  return mat_gnd2img_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CameraMatrix::mutable_mat_gnd2img() {
  // @@protoc_insertion_point(field_mutable_list:CommonProto.CameraMatrix.mat_gnd2img)
  return &mat_gnd2img_;
}

// repeated float mat_img2gnd = 2;
inline int CameraMatrix::mat_img2gnd_size() const {
  return mat_img2gnd_.size();
}
inline void CameraMatrix::clear_mat_img2gnd() {
  mat_img2gnd_.Clear();
}
inline float CameraMatrix::mat_img2gnd(int index) const {
  // @@protoc_insertion_point(field_get:CommonProto.CameraMatrix.mat_img2gnd)
  return mat_img2gnd_.Get(index);
}
inline void CameraMatrix::set_mat_img2gnd(int index, float value) {
  mat_img2gnd_.Set(index, value);
  // @@protoc_insertion_point(field_set:CommonProto.CameraMatrix.mat_img2gnd)
}
inline void CameraMatrix::add_mat_img2gnd(float value) {
  mat_img2gnd_.Add(value);
  // @@protoc_insertion_point(field_add:CommonProto.CameraMatrix.mat_img2gnd)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CameraMatrix::mat_img2gnd() const {
  // @@protoc_insertion_point(field_list:CommonProto.CameraMatrix.mat_img2gnd)
  return mat_img2gnd_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CameraMatrix::mutable_mat_img2gnd() {
  // @@protoc_insertion_point(field_mutable_list:CommonProto.CameraMatrix.mat_img2gnd)
  return &mat_img2gnd_;
}

// repeated float mat_vcsgnd2img = 3;
inline int CameraMatrix::mat_vcsgnd2img_size() const {
  return mat_vcsgnd2img_.size();
}
inline void CameraMatrix::clear_mat_vcsgnd2img() {
  mat_vcsgnd2img_.Clear();
}
inline float CameraMatrix::mat_vcsgnd2img(int index) const {
  // @@protoc_insertion_point(field_get:CommonProto.CameraMatrix.mat_vcsgnd2img)
  return mat_vcsgnd2img_.Get(index);
}
inline void CameraMatrix::set_mat_vcsgnd2img(int index, float value) {
  mat_vcsgnd2img_.Set(index, value);
  // @@protoc_insertion_point(field_set:CommonProto.CameraMatrix.mat_vcsgnd2img)
}
inline void CameraMatrix::add_mat_vcsgnd2img(float value) {
  mat_vcsgnd2img_.Add(value);
  // @@protoc_insertion_point(field_add:CommonProto.CameraMatrix.mat_vcsgnd2img)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CameraMatrix::mat_vcsgnd2img() const {
  // @@protoc_insertion_point(field_list:CommonProto.CameraMatrix.mat_vcsgnd2img)
  return mat_vcsgnd2img_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CameraMatrix::mutable_mat_vcsgnd2img() {
  // @@protoc_insertion_point(field_mutable_list:CommonProto.CameraMatrix.mat_vcsgnd2img)
  return &mat_vcsgnd2img_;
}

// repeated float mat_img2vcsgnd = 4;
inline int CameraMatrix::mat_img2vcsgnd_size() const {
  return mat_img2vcsgnd_.size();
}
inline void CameraMatrix::clear_mat_img2vcsgnd() {
  mat_img2vcsgnd_.Clear();
}
inline float CameraMatrix::mat_img2vcsgnd(int index) const {
  // @@protoc_insertion_point(field_get:CommonProto.CameraMatrix.mat_img2vcsgnd)
  return mat_img2vcsgnd_.Get(index);
}
inline void CameraMatrix::set_mat_img2vcsgnd(int index, float value) {
  mat_img2vcsgnd_.Set(index, value);
  // @@protoc_insertion_point(field_set:CommonProto.CameraMatrix.mat_img2vcsgnd)
}
inline void CameraMatrix::add_mat_img2vcsgnd(float value) {
  mat_img2vcsgnd_.Add(value);
  // @@protoc_insertion_point(field_add:CommonProto.CameraMatrix.mat_img2vcsgnd)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CameraMatrix::mat_img2vcsgnd() const {
  // @@protoc_insertion_point(field_list:CommonProto.CameraMatrix.mat_img2vcsgnd)
  return mat_img2vcsgnd_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CameraMatrix::mutable_mat_img2vcsgnd() {
  // @@protoc_insertion_point(field_mutable_list:CommonProto.CameraMatrix.mat_img2vcsgnd)
  return &mat_img2vcsgnd_;
}

// -------------------------------------------------------------------

// DistortParam

// repeated float param = 1;
inline int DistortParam::param_size() const {
  return param_.size();
}
inline void DistortParam::clear_param() {
  param_.Clear();
}
inline float DistortParam::param(int index) const {
  // @@protoc_insertion_point(field_get:CommonProto.DistortParam.param)
  return param_.Get(index);
}
inline void DistortParam::set_param(int index, float value) {
  param_.Set(index, value);
  // @@protoc_insertion_point(field_set:CommonProto.DistortParam.param)
}
inline void DistortParam::add_param(float value) {
  param_.Add(value);
  // @@protoc_insertion_point(field_add:CommonProto.DistortParam.param)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DistortParam::param() const {
  // @@protoc_insertion_point(field_list:CommonProto.DistortParam.param)
  return param_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DistortParam::mutable_param() {
  // @@protoc_insertion_point(field_mutable_list:CommonProto.DistortParam.param)
  return &param_;
}

// -------------------------------------------------------------------

// VCSParam

// repeated float rotation = 1;
inline int VCSParam::rotation_size() const {
  return rotation_.size();
}
inline void VCSParam::clear_rotation() {
  rotation_.Clear();
}
inline float VCSParam::rotation(int index) const {
  // @@protoc_insertion_point(field_get:CommonProto.VCSParam.rotation)
  return rotation_.Get(index);
}
inline void VCSParam::set_rotation(int index, float value) {
  rotation_.Set(index, value);
  // @@protoc_insertion_point(field_set:CommonProto.VCSParam.rotation)
}
inline void VCSParam::add_rotation(float value) {
  rotation_.Add(value);
  // @@protoc_insertion_point(field_add:CommonProto.VCSParam.rotation)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
VCSParam::rotation() const {
  // @@protoc_insertion_point(field_list:CommonProto.VCSParam.rotation)
  return rotation_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
VCSParam::mutable_rotation() {
  // @@protoc_insertion_point(field_mutable_list:CommonProto.VCSParam.rotation)
  return &rotation_;
}

// repeated float translation = 2;
inline int VCSParam::translation_size() const {
  return translation_.size();
}
inline void VCSParam::clear_translation() {
  translation_.Clear();
}
inline float VCSParam::translation(int index) const {
  // @@protoc_insertion_point(field_get:CommonProto.VCSParam.translation)
  return translation_.Get(index);
}
inline void VCSParam::set_translation(int index, float value) {
  translation_.Set(index, value);
  // @@protoc_insertion_point(field_set:CommonProto.VCSParam.translation)
}
inline void VCSParam::add_translation(float value) {
  translation_.Add(value);
  // @@protoc_insertion_point(field_add:CommonProto.VCSParam.translation)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
VCSParam::translation() const {
  // @@protoc_insertion_point(field_list:CommonProto.VCSParam.translation)
  return translation_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
VCSParam::mutable_translation() {
  // @@protoc_insertion_point(field_mutable_list:CommonProto.VCSParam.translation)
  return &translation_;
}

// -------------------------------------------------------------------

// CameraParam

// required float focal_u = 1;
inline bool CameraParam::has_focal_u() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CameraParam::clear_focal_u() {
  focal_u_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float CameraParam::focal_u() const {
  // @@protoc_insertion_point(field_get:CommonProto.CameraParam.focal_u)
  return focal_u_;
}
inline void CameraParam::set_focal_u(float value) {
  _has_bits_[0] |= 0x00000008u;
  focal_u_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.CameraParam.focal_u)
}

// required float focal_v = 2;
inline bool CameraParam::has_focal_v() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CameraParam::clear_focal_v() {
  focal_v_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float CameraParam::focal_v() const {
  // @@protoc_insertion_point(field_get:CommonProto.CameraParam.focal_v)
  return focal_v_;
}
inline void CameraParam::set_focal_v(float value) {
  _has_bits_[0] |= 0x00000010u;
  focal_v_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.CameraParam.focal_v)
}

// required float center_u = 3;
inline bool CameraParam::has_center_u() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CameraParam::clear_center_u() {
  center_u_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float CameraParam::center_u() const {
  // @@protoc_insertion_point(field_get:CommonProto.CameraParam.center_u)
  return center_u_;
}
inline void CameraParam::set_center_u(float value) {
  _has_bits_[0] |= 0x00000020u;
  center_u_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.CameraParam.center_u)
}

// required float center_v = 4;
inline bool CameraParam::has_center_v() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CameraParam::clear_center_v() {
  center_v_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float CameraParam::center_v() const {
  // @@protoc_insertion_point(field_get:CommonProto.CameraParam.center_v)
  return center_v_;
}
inline void CameraParam::set_center_v(float value) {
  _has_bits_[0] |= 0x00000040u;
  center_v_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.CameraParam.center_v)
}

// required float camera_x = 5;
inline bool CameraParam::has_camera_x() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CameraParam::clear_camera_x() {
  camera_x_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float CameraParam::camera_x() const {
  // @@protoc_insertion_point(field_get:CommonProto.CameraParam.camera_x)
  return camera_x_;
}
inline void CameraParam::set_camera_x(float value) {
  _has_bits_[0] |= 0x00000080u;
  camera_x_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.CameraParam.camera_x)
}

// required float camera_y = 6;
inline bool CameraParam::has_camera_y() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CameraParam::clear_camera_y() {
  camera_y_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline float CameraParam::camera_y() const {
  // @@protoc_insertion_point(field_get:CommonProto.CameraParam.camera_y)
  return camera_y_;
}
inline void CameraParam::set_camera_y(float value) {
  _has_bits_[0] |= 0x00000100u;
  camera_y_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.CameraParam.camera_y)
}

// required float camera_z = 7;
inline bool CameraParam::has_camera_z() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CameraParam::clear_camera_z() {
  camera_z_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline float CameraParam::camera_z() const {
  // @@protoc_insertion_point(field_get:CommonProto.CameraParam.camera_z)
  return camera_z_;
}
inline void CameraParam::set_camera_z(float value) {
  _has_bits_[0] |= 0x00000200u;
  camera_z_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.CameraParam.camera_z)
}

// required float pitch = 8;
inline bool CameraParam::has_pitch() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CameraParam::clear_pitch() {
  pitch_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline float CameraParam::pitch() const {
  // @@protoc_insertion_point(field_get:CommonProto.CameraParam.pitch)
  return pitch_;
}
inline void CameraParam::set_pitch(float value) {
  _has_bits_[0] |= 0x00000400u;
  pitch_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.CameraParam.pitch)
}

// required float yaw = 9;
inline bool CameraParam::has_yaw() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CameraParam::clear_yaw() {
  yaw_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline float CameraParam::yaw() const {
  // @@protoc_insertion_point(field_get:CommonProto.CameraParam.yaw)
  return yaw_;
}
inline void CameraParam::set_yaw(float value) {
  _has_bits_[0] |= 0x00000800u;
  yaw_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.CameraParam.yaw)
}

// required float roll = 10;
inline bool CameraParam::has_roll() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CameraParam::clear_roll() {
  roll_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline float CameraParam::roll() const {
  // @@protoc_insertion_point(field_get:CommonProto.CameraParam.roll)
  return roll_;
}
inline void CameraParam::set_roll(float value) {
  _has_bits_[0] |= 0x00001000u;
  roll_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.CameraParam.roll)
}

// optional int32 type = 11 [default = 0];
inline bool CameraParam::has_type() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CameraParam::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CameraParam::type() const {
  // @@protoc_insertion_point(field_get:CommonProto.CameraParam.type)
  return type_;
}
inline void CameraParam::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00002000u;
  type_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.CameraParam.type)
}

// optional float fov = 12;
inline bool CameraParam::has_fov() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CameraParam::clear_fov() {
  fov_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline float CameraParam::fov() const {
  // @@protoc_insertion_point(field_get:CommonProto.CameraParam.fov)
  return fov_;
}
inline void CameraParam::set_fov(float value) {
  _has_bits_[0] |= 0x00004000u;
  fov_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.CameraParam.fov)
}

// optional .CommonProto.DistortParam distort = 20;
inline bool CameraParam::has_distort() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CameraParam::clear_distort() {
  if (distort_ != nullptr) distort_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CommonProto::DistortParam& CameraParam::distort() const {
  const ::CommonProto::DistortParam* p = distort_;
  // @@protoc_insertion_point(field_get:CommonProto.CameraParam.distort)
  return p != nullptr ? *p : *reinterpret_cast<const ::CommonProto::DistortParam*>(
      &::CommonProto::_DistortParam_default_instance_);
}
inline ::CommonProto::DistortParam* CameraParam::release_distort() {
  // @@protoc_insertion_point(field_release:CommonProto.CameraParam.distort)
  _has_bits_[0] &= ~0x00000001u;
  ::CommonProto::DistortParam* temp = distort_;
  distort_ = nullptr;
  return temp;
}
inline ::CommonProto::DistortParam* CameraParam::mutable_distort() {
  _has_bits_[0] |= 0x00000001u;
  if (distort_ == nullptr) {
    auto* p = CreateMaybeMessage<::CommonProto::DistortParam>(GetArenaNoVirtual());
    distort_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CommonProto.CameraParam.distort)
  return distort_;
}
inline void CameraParam::set_allocated_distort(::CommonProto::DistortParam* distort) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete distort_;
  }
  if (distort) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      distort = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, distort, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  distort_ = distort;
  // @@protoc_insertion_point(field_set_allocated:CommonProto.CameraParam.distort)
}

// optional .CommonProto.VCSParam vcs = 21;
inline bool CameraParam::has_vcs() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CameraParam::clear_vcs() {
  if (vcs_ != nullptr) vcs_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::CommonProto::VCSParam& CameraParam::vcs() const {
  const ::CommonProto::VCSParam* p = vcs_;
  // @@protoc_insertion_point(field_get:CommonProto.CameraParam.vcs)
  return p != nullptr ? *p : *reinterpret_cast<const ::CommonProto::VCSParam*>(
      &::CommonProto::_VCSParam_default_instance_);
}
inline ::CommonProto::VCSParam* CameraParam::release_vcs() {
  // @@protoc_insertion_point(field_release:CommonProto.CameraParam.vcs)
  _has_bits_[0] &= ~0x00000002u;
  ::CommonProto::VCSParam* temp = vcs_;
  vcs_ = nullptr;
  return temp;
}
inline ::CommonProto::VCSParam* CameraParam::mutable_vcs() {
  _has_bits_[0] |= 0x00000002u;
  if (vcs_ == nullptr) {
    auto* p = CreateMaybeMessage<::CommonProto::VCSParam>(GetArenaNoVirtual());
    vcs_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CommonProto.CameraParam.vcs)
  return vcs_;
}
inline void CameraParam::set_allocated_vcs(::CommonProto::VCSParam* vcs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete vcs_;
  }
  if (vcs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      vcs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vcs, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  vcs_ = vcs;
  // @@protoc_insertion_point(field_set_allocated:CommonProto.CameraParam.vcs)
}

// optional .CommonProto.CameraMatrix mat = 30;
inline bool CameraParam::has_mat() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CameraParam::clear_mat() {
  if (mat_ != nullptr) mat_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::CommonProto::CameraMatrix& CameraParam::mat() const {
  const ::CommonProto::CameraMatrix* p = mat_;
  // @@protoc_insertion_point(field_get:CommonProto.CameraParam.mat)
  return p != nullptr ? *p : *reinterpret_cast<const ::CommonProto::CameraMatrix*>(
      &::CommonProto::_CameraMatrix_default_instance_);
}
inline ::CommonProto::CameraMatrix* CameraParam::release_mat() {
  // @@protoc_insertion_point(field_release:CommonProto.CameraParam.mat)
  _has_bits_[0] &= ~0x00000004u;
  ::CommonProto::CameraMatrix* temp = mat_;
  mat_ = nullptr;
  return temp;
}
inline ::CommonProto::CameraMatrix* CameraParam::mutable_mat() {
  _has_bits_[0] |= 0x00000004u;
  if (mat_ == nullptr) {
    auto* p = CreateMaybeMessage<::CommonProto::CameraMatrix>(GetArenaNoVirtual());
    mat_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CommonProto.CameraParam.mat)
  return mat_;
}
inline void CameraParam::set_allocated_mat(::CommonProto::CameraMatrix* mat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete mat_;
  }
  if (mat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mat, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  mat_ = mat;
  // @@protoc_insertion_point(field_set_allocated:CommonProto.CameraParam.mat)
}

// -------------------------------------------------------------------

// Color

// required uint32 b = 1;
inline bool Color::has_b() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Color::clear_b() {
  b_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Color::b() const {
  // @@protoc_insertion_point(field_get:CommonProto.Color.b)
  return b_;
}
inline void Color::set_b(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  b_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.Color.b)
}

// required uint32 g = 2;
inline bool Color::has_g() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Color::clear_g() {
  g_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Color::g() const {
  // @@protoc_insertion_point(field_get:CommonProto.Color.g)
  return g_;
}
inline void Color::set_g(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  g_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.Color.g)
}

// required uint32 r = 3;
inline bool Color::has_r() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Color::clear_r() {
  r_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Color::r() const {
  // @@protoc_insertion_point(field_get:CommonProto.Color.r)
  return r_;
}
inline void Color::set_r(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  r_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.Color.r)
}

// -------------------------------------------------------------------

// ParsingSetting

// required int32 parsing_type = 1;
inline bool ParsingSetting::has_parsing_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ParsingSetting::clear_parsing_type() {
  parsing_type_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ParsingSetting::parsing_type() const {
  // @@protoc_insertion_point(field_get:CommonProto.ParsingSetting.parsing_type)
  return parsing_type_;
}
inline void ParsingSetting::set_parsing_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  parsing_type_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.ParsingSetting.parsing_type)
}

// required int32 parsing_channels = 2;
inline bool ParsingSetting::has_parsing_channels() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ParsingSetting::clear_parsing_channels() {
  parsing_channels_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ParsingSetting::parsing_channels() const {
  // @@protoc_insertion_point(field_get:CommonProto.ParsingSetting.parsing_channels)
  return parsing_channels_;
}
inline void ParsingSetting::set_parsing_channels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  parsing_channels_ = value;
  // @@protoc_insertion_point(field_set:CommonProto.ParsingSetting.parsing_channels)
}

// repeated uint64 channel_labels = 3;
inline int ParsingSetting::channel_labels_size() const {
  return channel_labels_.size();
}
inline void ParsingSetting::clear_channel_labels() {
  channel_labels_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ParsingSetting::channel_labels(int index) const {
  // @@protoc_insertion_point(field_get:CommonProto.ParsingSetting.channel_labels)
  return channel_labels_.Get(index);
}
inline void ParsingSetting::set_channel_labels(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  channel_labels_.Set(index, value);
  // @@protoc_insertion_point(field_set:CommonProto.ParsingSetting.channel_labels)
}
inline void ParsingSetting::add_channel_labels(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  channel_labels_.Add(value);
  // @@protoc_insertion_point(field_add:CommonProto.ParsingSetting.channel_labels)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
ParsingSetting::channel_labels() const {
  // @@protoc_insertion_point(field_list:CommonProto.ParsingSetting.channel_labels)
  return channel_labels_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
ParsingSetting::mutable_channel_labels() {
  // @@protoc_insertion_point(field_mutable_list:CommonProto.ParsingSetting.channel_labels)
  return &channel_labels_;
}

// repeated .CommonProto.Color channel_colors = 4;
inline int ParsingSetting::channel_colors_size() const {
  return channel_colors_.size();
}
inline void ParsingSetting::clear_channel_colors() {
  channel_colors_.Clear();
}
inline ::CommonProto::Color* ParsingSetting::mutable_channel_colors(int index) {
  // @@protoc_insertion_point(field_mutable:CommonProto.ParsingSetting.channel_colors)
  return channel_colors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::Color >*
ParsingSetting::mutable_channel_colors() {
  // @@protoc_insertion_point(field_mutable_list:CommonProto.ParsingSetting.channel_colors)
  return &channel_colors_;
}
inline const ::CommonProto::Color& ParsingSetting::channel_colors(int index) const {
  // @@protoc_insertion_point(field_get:CommonProto.ParsingSetting.channel_colors)
  return channel_colors_.Get(index);
}
inline ::CommonProto::Color* ParsingSetting::add_channel_colors() {
  // @@protoc_insertion_point(field_add:CommonProto.ParsingSetting.channel_colors)
  return channel_colors_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::Color >&
ParsingSetting::channel_colors() const {
  // @@protoc_insertion_point(field_list:CommonProto.ParsingSetting.channel_colors)
  return channel_colors_;
}

// repeated int32 freespace_channels = 5;
inline int ParsingSetting::freespace_channels_size() const {
  return freespace_channels_.size();
}
inline void ParsingSetting::clear_freespace_channels() {
  freespace_channels_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ParsingSetting::freespace_channels(int index) const {
  // @@protoc_insertion_point(field_get:CommonProto.ParsingSetting.freespace_channels)
  return freespace_channels_.Get(index);
}
inline void ParsingSetting::set_freespace_channels(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  freespace_channels_.Set(index, value);
  // @@protoc_insertion_point(field_set:CommonProto.ParsingSetting.freespace_channels)
}
inline void ParsingSetting::add_freespace_channels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  freespace_channels_.Add(value);
  // @@protoc_insertion_point(field_add:CommonProto.ParsingSetting.freespace_channels)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
ParsingSetting::freespace_channels() const {
  // @@protoc_insertion_point(field_list:CommonProto.ParsingSetting.freespace_channels)
  return freespace_channels_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
ParsingSetting::mutable_freespace_channels() {
  // @@protoc_insertion_point(field_mutable_list:CommonProto.ParsingSetting.freespace_channels)
  return &freespace_channels_;
}

// repeated int32 boundspace_channels = 6;
inline int ParsingSetting::boundspace_channels_size() const {
  return boundspace_channels_.size();
}
inline void ParsingSetting::clear_boundspace_channels() {
  boundspace_channels_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ParsingSetting::boundspace_channels(int index) const {
  // @@protoc_insertion_point(field_get:CommonProto.ParsingSetting.boundspace_channels)
  return boundspace_channels_.Get(index);
}
inline void ParsingSetting::set_boundspace_channels(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  boundspace_channels_.Set(index, value);
  // @@protoc_insertion_point(field_set:CommonProto.ParsingSetting.boundspace_channels)
}
inline void ParsingSetting::add_boundspace_channels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  boundspace_channels_.Add(value);
  // @@protoc_insertion_point(field_add:CommonProto.ParsingSetting.boundspace_channels)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
ParsingSetting::boundspace_channels() const {
  // @@protoc_insertion_point(field_list:CommonProto.ParsingSetting.boundspace_channels)
  return boundspace_channels_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
ParsingSetting::mutable_boundspace_channels() {
  // @@protoc_insertion_point(field_mutable_list:CommonProto.ParsingSetting.boundspace_channels)
  return &boundspace_channels_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace CommonProto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::CommonProto::ImageFormat> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CommonProto::ImageFormat>() {
  return ::CommonProto::ImageFormat_descriptor();
}
template <> struct is_proto_enum< ::CommonProto::ParsingFormat> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CommonProto::ParsingFormat>() {
  return ::CommonProto::ParsingFormat_descriptor();
}
template <> struct is_proto_enum< ::CommonProto::ObstacleRawModelType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CommonProto::ObstacleRawModelType>() {
  return ::CommonProto::ObstacleRawModelType_descriptor();
}
template <> struct is_proto_enum< ::CommonProto::CameraType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CommonProto::CameraType>() {
  return ::CommonProto::CameraType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_common_2eproto
