// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zmq_msg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_zmq_5fmsg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_zmq_5fmsg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_zmq_5fmsg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_zmq_5fmsg_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_zmq_5fmsg_2eproto;
namespace ZMQMessage {
class ImageMsg;
class ImageMsgDefaultTypeInternal;
extern ImageMsgDefaultTypeInternal _ImageMsg_default_instance_;
class ZMQMsg;
class ZMQMsgDefaultTypeInternal;
extern ZMQMsgDefaultTypeInternal _ZMQMsg_default_instance_;
}  // namespace ZMQMessage
PROTOBUF_NAMESPACE_OPEN
template<> ::ZMQMessage::ImageMsg* Arena::CreateMaybeMessage<::ZMQMessage::ImageMsg>(Arena*);
template<> ::ZMQMessage::ZMQMsg* Arena::CreateMaybeMessage<::ZMQMessage::ZMQMsg>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ZMQMessage {

enum ImageMsg_DataType : int {
  ImageMsg_DataType_UINT8 = 0,
  ImageMsg_DataType_INT32 = 1,
  ImageMsg_DataType_FLOAT32 = 2,
  ImageMsg_DataType_ImageMsg_DataType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ImageMsg_DataType_ImageMsg_DataType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ImageMsg_DataType_IsValid(int value);
constexpr ImageMsg_DataType ImageMsg_DataType_DataType_MIN = ImageMsg_DataType_UINT8;
constexpr ImageMsg_DataType ImageMsg_DataType_DataType_MAX = ImageMsg_DataType_FLOAT32;
constexpr int ImageMsg_DataType_DataType_ARRAYSIZE = ImageMsg_DataType_DataType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ImageMsg_DataType_descriptor();
template<typename T>
inline const std::string& ImageMsg_DataType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ImageMsg_DataType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ImageMsg_DataType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ImageMsg_DataType_descriptor(), enum_t_value);
}
inline bool ImageMsg_DataType_Parse(
    const std::string& name, ImageMsg_DataType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ImageMsg_DataType>(
    ImageMsg_DataType_descriptor(), name, value);
}
enum ZMQMsg_MsgType : int {
  ZMQMsg_MsgType_IMAGE_MSG = 0,
  ZMQMsg_MsgType_FINISH_MSG = 1,
  ZMQMsg_MsgType_ZMQMsg_MsgType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ZMQMsg_MsgType_ZMQMsg_MsgType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ZMQMsg_MsgType_IsValid(int value);
constexpr ZMQMsg_MsgType ZMQMsg_MsgType_MsgType_MIN = ZMQMsg_MsgType_IMAGE_MSG;
constexpr ZMQMsg_MsgType ZMQMsg_MsgType_MsgType_MAX = ZMQMsg_MsgType_FINISH_MSG;
constexpr int ZMQMsg_MsgType_MsgType_ARRAYSIZE = ZMQMsg_MsgType_MsgType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ZMQMsg_MsgType_descriptor();
template<typename T>
inline const std::string& ZMQMsg_MsgType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ZMQMsg_MsgType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ZMQMsg_MsgType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ZMQMsg_MsgType_descriptor(), enum_t_value);
}
inline bool ZMQMsg_MsgType_Parse(
    const std::string& name, ZMQMsg_MsgType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ZMQMsg_MsgType>(
    ZMQMsg_MsgType_descriptor(), name, value);
}
enum ImageFormat : int {
  IMG_Y = 0,
  IMG_NV12 = 1,
  IMG_YUV444 = 2,
  IMG_BGR = 3,
  IMG_BGRP = 4,
  IMG_RGB = 5,
  IMG_RGBP = 6,
  TENSOR_U8 = 7,
  TENSOR_S8 = 8,
  TENSOR_F32 = 9,
  TENSOR_S32 = 10,
  TENSOR_U32 = 11,
  MAX = 12,
  ImageFormat_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ImageFormat_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ImageFormat_IsValid(int value);
constexpr ImageFormat ImageFormat_MIN = IMG_Y;
constexpr ImageFormat ImageFormat_MAX = MAX;
constexpr int ImageFormat_ARRAYSIZE = ImageFormat_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ImageFormat_descriptor();
template<typename T>
inline const std::string& ImageFormat_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ImageFormat>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ImageFormat_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ImageFormat_descriptor(), enum_t_value);
}
inline bool ImageFormat_Parse(
    const std::string& name, ImageFormat* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ImageFormat>(
    ImageFormat_descriptor(), name, value);
}
// ===================================================================

class ImageMsg :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ZMQMessage.ImageMsg) */ {
 public:
  ImageMsg();
  virtual ~ImageMsg();

  ImageMsg(const ImageMsg& from);
  ImageMsg(ImageMsg&& from) noexcept
    : ImageMsg() {
    *this = ::std::move(from);
  }

  inline ImageMsg& operator=(const ImageMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageMsg& operator=(ImageMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImageMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImageMsg* internal_default_instance() {
    return reinterpret_cast<const ImageMsg*>(
               &_ImageMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ImageMsg* other);
  friend void swap(ImageMsg& a, ImageMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ImageMsg* New() const final {
    return CreateMaybeMessage<ImageMsg>(nullptr);
  }

  ImageMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImageMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImageMsg& from);
  void MergeFrom(const ImageMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ZMQMessage.ImageMsg";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_zmq_5fmsg_2eproto);
    return ::descriptor_table_zmq_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ImageMsg_DataType DataType;
  static constexpr DataType UINT8 =
    ImageMsg_DataType_UINT8;
  static constexpr DataType INT32 =
    ImageMsg_DataType_INT32;
  static constexpr DataType FLOAT32 =
    ImageMsg_DataType_FLOAT32;
  static inline bool DataType_IsValid(int value) {
    return ImageMsg_DataType_IsValid(value);
  }
  static constexpr DataType DataType_MIN =
    ImageMsg_DataType_DataType_MIN;
  static constexpr DataType DataType_MAX =
    ImageMsg_DataType_DataType_MAX;
  static constexpr int DataType_ARRAYSIZE =
    ImageMsg_DataType_DataType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DataType_descriptor() {
    return ImageMsg_DataType_descriptor();
  }
  template<typename T>
  static inline const std::string& DataType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DataType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DataType_Name.");
    return ImageMsg_DataType_Name(enum_t_value);
  }
  static inline bool DataType_Parse(const std::string& name,
      DataType* value) {
    return ImageMsg_DataType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // bytes image_data = 1;
  void clear_image_data();
  static const int kImageDataFieldNumber = 1;
  const std::string& image_data() const;
  void set_image_data(const std::string& value);
  void set_image_data(std::string&& value);
  void set_image_data(const char* value);
  void set_image_data(const void* value, size_t size);
  std::string* mutable_image_data();
  std::string* release_image_data();
  void set_allocated_image_data(std::string* image_data);

  // string image_name = 8;
  void clear_image_name();
  static const int kImageNameFieldNumber = 8;
  const std::string& image_name() const;
  void set_image_name(const std::string& value);
  void set_image_name(std::string&& value);
  void set_image_name(const char* value);
  void set_image_name(const char* value, size_t size);
  std::string* mutable_image_name();
  std::string* release_image_name();
  void set_allocated_image_name(std::string* image_name);

  // int32 image_width = 2;
  void clear_image_width();
  static const int kImageWidthFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 image_width() const;
  void set_image_width(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 image_height = 3;
  void clear_image_height();
  static const int kImageHeightFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 image_height() const;
  void set_image_height(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 image_dst_width = 4;
  void clear_image_dst_width();
  static const int kImageDstWidthFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int32 image_dst_width() const;
  void set_image_dst_width(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 image_dst_height = 5;
  void clear_image_dst_height();
  static const int kImageDstHeightFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::int32 image_dst_height() const;
  void set_image_dst_height(::PROTOBUF_NAMESPACE_ID::int32 value);

  // .ZMQMessage.ImageFormat image_format = 6;
  void clear_image_format();
  static const int kImageFormatFieldNumber = 6;
  ::ZMQMessage::ImageFormat image_format() const;
  void set_image_format(::ZMQMessage::ImageFormat value);

  // .ZMQMessage.ImageMsg.DataType data_type = 7;
  void clear_data_type();
  static const int kDataTypeFieldNumber = 7;
  ::ZMQMessage::ImageMsg_DataType data_type() const;
  void set_data_type(::ZMQMessage::ImageMsg_DataType value);

  // @@protoc_insertion_point(class_scope:ZMQMessage.ImageMsg)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 image_width_;
  ::PROTOBUF_NAMESPACE_ID::int32 image_height_;
  ::PROTOBUF_NAMESPACE_ID::int32 image_dst_width_;
  ::PROTOBUF_NAMESPACE_ID::int32 image_dst_height_;
  int image_format_;
  int data_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_zmq_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class ZMQMsg :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ZMQMessage.ZMQMsg) */ {
 public:
  ZMQMsg();
  virtual ~ZMQMsg();

  ZMQMsg(const ZMQMsg& from);
  ZMQMsg(ZMQMsg&& from) noexcept
    : ZMQMsg() {
    *this = ::std::move(from);
  }

  inline ZMQMsg& operator=(const ZMQMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline ZMQMsg& operator=(ZMQMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ZMQMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ZMQMsg* internal_default_instance() {
    return reinterpret_cast<const ZMQMsg*>(
               &_ZMQMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ZMQMsg* other);
  friend void swap(ZMQMsg& a, ZMQMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ZMQMsg* New() const final {
    return CreateMaybeMessage<ZMQMsg>(nullptr);
  }

  ZMQMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ZMQMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ZMQMsg& from);
  void MergeFrom(const ZMQMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ZMQMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ZMQMessage.ZMQMsg";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_zmq_5fmsg_2eproto);
    return ::descriptor_table_zmq_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ZMQMsg_MsgType MsgType;
  static constexpr MsgType IMAGE_MSG =
    ZMQMsg_MsgType_IMAGE_MSG;
  static constexpr MsgType FINISH_MSG =
    ZMQMsg_MsgType_FINISH_MSG;
  static inline bool MsgType_IsValid(int value) {
    return ZMQMsg_MsgType_IsValid(value);
  }
  static constexpr MsgType MsgType_MIN =
    ZMQMsg_MsgType_MsgType_MIN;
  static constexpr MsgType MsgType_MAX =
    ZMQMsg_MsgType_MsgType_MAX;
  static constexpr int MsgType_ARRAYSIZE =
    ZMQMsg_MsgType_MsgType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MsgType_descriptor() {
    return ZMQMsg_MsgType_descriptor();
  }
  template<typename T>
  static inline const std::string& MsgType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MsgType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MsgType_Name.");
    return ZMQMsg_MsgType_Name(enum_t_value);
  }
  static inline bool MsgType_Parse(const std::string& name,
      MsgType* value) {
    return ZMQMsg_MsgType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .ZMQMessage.ImageMsg img_msg = 2;
  bool has_img_msg() const;
  void clear_img_msg();
  static const int kImgMsgFieldNumber = 2;
  const ::ZMQMessage::ImageMsg& img_msg() const;
  ::ZMQMessage::ImageMsg* release_img_msg();
  ::ZMQMessage::ImageMsg* mutable_img_msg();
  void set_allocated_img_msg(::ZMQMessage::ImageMsg* img_msg);

  // .ZMQMessage.ZMQMsg.MsgType msg_type = 1;
  void clear_msg_type();
  static const int kMsgTypeFieldNumber = 1;
  ::ZMQMessage::ZMQMsg_MsgType msg_type() const;
  void set_msg_type(::ZMQMessage::ZMQMsg_MsgType value);

  // @@protoc_insertion_point(class_scope:ZMQMessage.ZMQMsg)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::ZMQMessage::ImageMsg* img_msg_;
  int msg_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_zmq_5fmsg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ImageMsg

// bytes image_data = 1;
inline void ImageMsg::clear_image_data() {
  image_data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ImageMsg::image_data() const {
  // @@protoc_insertion_point(field_get:ZMQMessage.ImageMsg.image_data)
  return image_data_.GetNoArena();
}
inline void ImageMsg::set_image_data(const std::string& value) {
  
  image_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ZMQMessage.ImageMsg.image_data)
}
inline void ImageMsg::set_image_data(std::string&& value) {
  
  image_data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ZMQMessage.ImageMsg.image_data)
}
inline void ImageMsg::set_image_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  image_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ZMQMessage.ImageMsg.image_data)
}
inline void ImageMsg::set_image_data(const void* value, size_t size) {
  
  image_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ZMQMessage.ImageMsg.image_data)
}
inline std::string* ImageMsg::mutable_image_data() {
  
  // @@protoc_insertion_point(field_mutable:ZMQMessage.ImageMsg.image_data)
  return image_data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ImageMsg::release_image_data() {
  // @@protoc_insertion_point(field_release:ZMQMessage.ImageMsg.image_data)
  
  return image_data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ImageMsg::set_allocated_image_data(std::string* image_data) {
  if (image_data != nullptr) {
    
  } else {
    
  }
  image_data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image_data);
  // @@protoc_insertion_point(field_set_allocated:ZMQMessage.ImageMsg.image_data)
}

// int32 image_width = 2;
inline void ImageMsg::clear_image_width() {
  image_width_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImageMsg::image_width() const {
  // @@protoc_insertion_point(field_get:ZMQMessage.ImageMsg.image_width)
  return image_width_;
}
inline void ImageMsg::set_image_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  image_width_ = value;
  // @@protoc_insertion_point(field_set:ZMQMessage.ImageMsg.image_width)
}

// int32 image_height = 3;
inline void ImageMsg::clear_image_height() {
  image_height_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImageMsg::image_height() const {
  // @@protoc_insertion_point(field_get:ZMQMessage.ImageMsg.image_height)
  return image_height_;
}
inline void ImageMsg::set_image_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  image_height_ = value;
  // @@protoc_insertion_point(field_set:ZMQMessage.ImageMsg.image_height)
}

// int32 image_dst_width = 4;
inline void ImageMsg::clear_image_dst_width() {
  image_dst_width_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImageMsg::image_dst_width() const {
  // @@protoc_insertion_point(field_get:ZMQMessage.ImageMsg.image_dst_width)
  return image_dst_width_;
}
inline void ImageMsg::set_image_dst_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  image_dst_width_ = value;
  // @@protoc_insertion_point(field_set:ZMQMessage.ImageMsg.image_dst_width)
}

// int32 image_dst_height = 5;
inline void ImageMsg::clear_image_dst_height() {
  image_dst_height_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImageMsg::image_dst_height() const {
  // @@protoc_insertion_point(field_get:ZMQMessage.ImageMsg.image_dst_height)
  return image_dst_height_;
}
inline void ImageMsg::set_image_dst_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  image_dst_height_ = value;
  // @@protoc_insertion_point(field_set:ZMQMessage.ImageMsg.image_dst_height)
}

// .ZMQMessage.ImageFormat image_format = 6;
inline void ImageMsg::clear_image_format() {
  image_format_ = 0;
}
inline ::ZMQMessage::ImageFormat ImageMsg::image_format() const {
  // @@protoc_insertion_point(field_get:ZMQMessage.ImageMsg.image_format)
  return static_cast< ::ZMQMessage::ImageFormat >(image_format_);
}
inline void ImageMsg::set_image_format(::ZMQMessage::ImageFormat value) {
  
  image_format_ = value;
  // @@protoc_insertion_point(field_set:ZMQMessage.ImageMsg.image_format)
}

// .ZMQMessage.ImageMsg.DataType data_type = 7;
inline void ImageMsg::clear_data_type() {
  data_type_ = 0;
}
inline ::ZMQMessage::ImageMsg_DataType ImageMsg::data_type() const {
  // @@protoc_insertion_point(field_get:ZMQMessage.ImageMsg.data_type)
  return static_cast< ::ZMQMessage::ImageMsg_DataType >(data_type_);
}
inline void ImageMsg::set_data_type(::ZMQMessage::ImageMsg_DataType value) {
  
  data_type_ = value;
  // @@protoc_insertion_point(field_set:ZMQMessage.ImageMsg.data_type)
}

// string image_name = 8;
inline void ImageMsg::clear_image_name() {
  image_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ImageMsg::image_name() const {
  // @@protoc_insertion_point(field_get:ZMQMessage.ImageMsg.image_name)
  return image_name_.GetNoArena();
}
inline void ImageMsg::set_image_name(const std::string& value) {
  
  image_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ZMQMessage.ImageMsg.image_name)
}
inline void ImageMsg::set_image_name(std::string&& value) {
  
  image_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ZMQMessage.ImageMsg.image_name)
}
inline void ImageMsg::set_image_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  image_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ZMQMessage.ImageMsg.image_name)
}
inline void ImageMsg::set_image_name(const char* value, size_t size) {
  
  image_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ZMQMessage.ImageMsg.image_name)
}
inline std::string* ImageMsg::mutable_image_name() {
  
  // @@protoc_insertion_point(field_mutable:ZMQMessage.ImageMsg.image_name)
  return image_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ImageMsg::release_image_name() {
  // @@protoc_insertion_point(field_release:ZMQMessage.ImageMsg.image_name)
  
  return image_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ImageMsg::set_allocated_image_name(std::string* image_name) {
  if (image_name != nullptr) {
    
  } else {
    
  }
  image_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image_name);
  // @@protoc_insertion_point(field_set_allocated:ZMQMessage.ImageMsg.image_name)
}

// -------------------------------------------------------------------

// ZMQMsg

// .ZMQMessage.ZMQMsg.MsgType msg_type = 1;
inline void ZMQMsg::clear_msg_type() {
  msg_type_ = 0;
}
inline ::ZMQMessage::ZMQMsg_MsgType ZMQMsg::msg_type() const {
  // @@protoc_insertion_point(field_get:ZMQMessage.ZMQMsg.msg_type)
  return static_cast< ::ZMQMessage::ZMQMsg_MsgType >(msg_type_);
}
inline void ZMQMsg::set_msg_type(::ZMQMessage::ZMQMsg_MsgType value) {
  
  msg_type_ = value;
  // @@protoc_insertion_point(field_set:ZMQMessage.ZMQMsg.msg_type)
}

// .ZMQMessage.ImageMsg img_msg = 2;
inline bool ZMQMsg::has_img_msg() const {
  return this != internal_default_instance() && img_msg_ != nullptr;
}
inline void ZMQMsg::clear_img_msg() {
  if (GetArenaNoVirtual() == nullptr && img_msg_ != nullptr) {
    delete img_msg_;
  }
  img_msg_ = nullptr;
}
inline const ::ZMQMessage::ImageMsg& ZMQMsg::img_msg() const {
  const ::ZMQMessage::ImageMsg* p = img_msg_;
  // @@protoc_insertion_point(field_get:ZMQMessage.ZMQMsg.img_msg)
  return p != nullptr ? *p : *reinterpret_cast<const ::ZMQMessage::ImageMsg*>(
      &::ZMQMessage::_ImageMsg_default_instance_);
}
inline ::ZMQMessage::ImageMsg* ZMQMsg::release_img_msg() {
  // @@protoc_insertion_point(field_release:ZMQMessage.ZMQMsg.img_msg)
  
  ::ZMQMessage::ImageMsg* temp = img_msg_;
  img_msg_ = nullptr;
  return temp;
}
inline ::ZMQMessage::ImageMsg* ZMQMsg::mutable_img_msg() {
  
  if (img_msg_ == nullptr) {
    auto* p = CreateMaybeMessage<::ZMQMessage::ImageMsg>(GetArenaNoVirtual());
    img_msg_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ZMQMessage.ZMQMsg.img_msg)
  return img_msg_;
}
inline void ZMQMsg::set_allocated_img_msg(::ZMQMessage::ImageMsg* img_msg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete img_msg_;
  }
  if (img_msg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      img_msg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, img_msg, submessage_arena);
    }
    
  } else {
    
  }
  img_msg_ = img_msg;
  // @@protoc_insertion_point(field_set_allocated:ZMQMessage.ZMQMsg.img_msg)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ZMQMessage

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ZMQMessage::ImageMsg_DataType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ZMQMessage::ImageMsg_DataType>() {
  return ::ZMQMessage::ImageMsg_DataType_descriptor();
}
template <> struct is_proto_enum< ::ZMQMessage::ZMQMsg_MsgType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ZMQMessage::ZMQMsg_MsgType>() {
  return ::ZMQMessage::ZMQMsg_MsgType_descriptor();
}
template <> struct is_proto_enum< ::ZMQMessage::ImageFormat> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ZMQMessage::ImageFormat>() {
  return ::ZMQMessage::ImageFormat_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_zmq_5fmsg_2eproto
