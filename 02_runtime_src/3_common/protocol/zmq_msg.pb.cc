// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zmq_msg.proto

#include "zmq_msg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_zmq_5fmsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ImageMsg_zmq_5fmsg_2eproto;
namespace ZMQMessage {
class ImageMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ImageMsg> _instance;
} _ImageMsg_default_instance_;
class ZMQMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ZMQMsg> _instance;
} _ZMQMsg_default_instance_;
}  // namespace ZMQMessage
static void InitDefaultsscc_info_ImageMsg_zmq_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ZMQMessage::_ImageMsg_default_instance_;
    new (ptr) ::ZMQMessage::ImageMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ZMQMessage::ImageMsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ImageMsg_zmq_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ImageMsg_zmq_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_ZMQMsg_zmq_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ZMQMessage::_ZMQMsg_default_instance_;
    new (ptr) ::ZMQMessage::ZMQMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ZMQMessage::ZMQMsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ZMQMsg_zmq_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ZMQMsg_zmq_5fmsg_2eproto}, {
      &scc_info_ImageMsg_zmq_5fmsg_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_zmq_5fmsg_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_zmq_5fmsg_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_zmq_5fmsg_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_zmq_5fmsg_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ZMQMessage::ImageMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ZMQMessage::ImageMsg, image_data_),
  PROTOBUF_FIELD_OFFSET(::ZMQMessage::ImageMsg, image_width_),
  PROTOBUF_FIELD_OFFSET(::ZMQMessage::ImageMsg, image_height_),
  PROTOBUF_FIELD_OFFSET(::ZMQMessage::ImageMsg, image_dst_width_),
  PROTOBUF_FIELD_OFFSET(::ZMQMessage::ImageMsg, image_dst_height_),
  PROTOBUF_FIELD_OFFSET(::ZMQMessage::ImageMsg, image_format_),
  PROTOBUF_FIELD_OFFSET(::ZMQMessage::ImageMsg, data_type_),
  PROTOBUF_FIELD_OFFSET(::ZMQMessage::ImageMsg, image_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ZMQMessage::ZMQMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ZMQMessage::ZMQMsg, msg_type_),
  PROTOBUF_FIELD_OFFSET(::ZMQMessage::ZMQMsg, img_msg_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ZMQMessage::ImageMsg)},
  { 13, -1, sizeof(::ZMQMessage::ZMQMsg)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ZMQMessage::_ImageMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ZMQMessage::_ZMQMsg_default_instance_),
};

const char descriptor_table_protodef_zmq_5fmsg_2eproto[] =
  "\n\rzmq_msg.proto\022\nZMQMessage\"\240\002\n\010ImageMsg"
  "\022\022\n\nimage_data\030\001 \001(\014\022\023\n\013image_width\030\002 \001("
  "\005\022\024\n\014image_height\030\003 \001(\005\022\027\n\017image_dst_wid"
  "th\030\004 \001(\005\022\030\n\020image_dst_height\030\005 \001(\005\022-\n\014im"
  "age_format\030\006 \001(\0162\027.ZMQMessage.ImageForma"
  "t\0220\n\tdata_type\030\007 \001(\0162\035.ZMQMessage.ImageM"
  "sg.DataType\022\022\n\nimage_name\030\010 \001(\t\"-\n\010DataT"
  "ype\022\t\n\005UINT8\020\000\022\t\n\005INT32\020\001\022\013\n\007FLOAT32\020\002\"\207"
  "\001\n\006ZMQMsg\022,\n\010msg_type\030\001 \001(\0162\032.ZMQMessage"
  ".ZMQMsg.MsgType\022%\n\007img_msg\030\002 \001(\0132\024.ZMQMe"
  "ssage.ImageMsg\"(\n\007MsgType\022\r\n\tIMAGE_MSG\020\000"
  "\022\016\n\nFINISH_MSG\020\001*\303\001\n\013ImageFormat\022\t\n\005IMG_"
  "Y\020\000\022\014\n\010IMG_NV12\020\001\022\016\n\nIMG_YUV444\020\002\022\013\n\007IMG"
  "_BGR\020\003\022\014\n\010IMG_BGRP\020\004\022\013\n\007IMG_RGB\020\005\022\014\n\010IMG"
  "_RGBP\020\006\022\r\n\tTENSOR_U8\020\007\022\r\n\tTENSOR_S8\020\010\022\016\n"
  "\nTENSOR_F32\020\t\022\016\n\nTENSOR_S32\020\n\022\016\n\nTENSOR_"
  "U32\020\013\022\007\n\003MAX\020\014b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_zmq_5fmsg_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_zmq_5fmsg_2eproto_sccs[2] = {
  &scc_info_ImageMsg_zmq_5fmsg_2eproto.base,
  &scc_info_ZMQMsg_zmq_5fmsg_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_zmq_5fmsg_2eproto_once;
static bool descriptor_table_zmq_5fmsg_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_zmq_5fmsg_2eproto = {
  &descriptor_table_zmq_5fmsg_2eproto_initialized, descriptor_table_protodef_zmq_5fmsg_2eproto, "zmq_msg.proto", 662,
  &descriptor_table_zmq_5fmsg_2eproto_once, descriptor_table_zmq_5fmsg_2eproto_sccs, descriptor_table_zmq_5fmsg_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_zmq_5fmsg_2eproto::offsets,
  file_level_metadata_zmq_5fmsg_2eproto, 2, file_level_enum_descriptors_zmq_5fmsg_2eproto, file_level_service_descriptors_zmq_5fmsg_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_zmq_5fmsg_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_zmq_5fmsg_2eproto), true);
namespace ZMQMessage {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ImageMsg_DataType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_zmq_5fmsg_2eproto);
  return file_level_enum_descriptors_zmq_5fmsg_2eproto[0];
}
bool ImageMsg_DataType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ImageMsg_DataType ImageMsg::UINT8;
constexpr ImageMsg_DataType ImageMsg::INT32;
constexpr ImageMsg_DataType ImageMsg::FLOAT32;
constexpr ImageMsg_DataType ImageMsg::DataType_MIN;
constexpr ImageMsg_DataType ImageMsg::DataType_MAX;
constexpr int ImageMsg::DataType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ZMQMsg_MsgType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_zmq_5fmsg_2eproto);
  return file_level_enum_descriptors_zmq_5fmsg_2eproto[1];
}
bool ZMQMsg_MsgType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ZMQMsg_MsgType ZMQMsg::IMAGE_MSG;
constexpr ZMQMsg_MsgType ZMQMsg::FINISH_MSG;
constexpr ZMQMsg_MsgType ZMQMsg::MsgType_MIN;
constexpr ZMQMsg_MsgType ZMQMsg::MsgType_MAX;
constexpr int ZMQMsg::MsgType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ImageFormat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_zmq_5fmsg_2eproto);
  return file_level_enum_descriptors_zmq_5fmsg_2eproto[2];
}
bool ImageFormat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void ImageMsg::InitAsDefaultInstance() {
}
class ImageMsg::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImageMsg::kImageDataFieldNumber;
const int ImageMsg::kImageWidthFieldNumber;
const int ImageMsg::kImageHeightFieldNumber;
const int ImageMsg::kImageDstWidthFieldNumber;
const int ImageMsg::kImageDstHeightFieldNumber;
const int ImageMsg::kImageFormatFieldNumber;
const int ImageMsg::kDataTypeFieldNumber;
const int ImageMsg::kImageNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImageMsg::ImageMsg()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ZMQMessage.ImageMsg)
}
ImageMsg::ImageMsg(const ImageMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  image_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.image_data().size() > 0) {
    image_data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.image_data_);
  }
  image_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.image_name().size() > 0) {
    image_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.image_name_);
  }
  ::memcpy(&image_width_, &from.image_width_,
    static_cast<size_t>(reinterpret_cast<char*>(&data_type_) -
    reinterpret_cast<char*>(&image_width_)) + sizeof(data_type_));
  // @@protoc_insertion_point(copy_constructor:ZMQMessage.ImageMsg)
}

void ImageMsg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ImageMsg_zmq_5fmsg_2eproto.base);
  image_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  image_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&image_width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_type_) -
      reinterpret_cast<char*>(&image_width_)) + sizeof(data_type_));
}

ImageMsg::~ImageMsg() {
  // @@protoc_insertion_point(destructor:ZMQMessage.ImageMsg)
  SharedDtor();
}

void ImageMsg::SharedDtor() {
  image_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  image_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ImageMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ImageMsg& ImageMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ImageMsg_zmq_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void ImageMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:ZMQMessage.ImageMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  image_data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  image_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&image_width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_type_) -
      reinterpret_cast<char*>(&image_width_)) + sizeof(data_type_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ImageMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes image_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_image_data(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 image_width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          image_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 image_height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          image_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 image_dst_width = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          image_dst_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 image_dst_height = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          image_dst_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ZMQMessage.ImageFormat image_format = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_image_format(static_cast<::ZMQMessage::ImageFormat>(val));
        } else goto handle_unusual;
        continue;
      // .ZMQMessage.ImageMsg.DataType data_type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_data_type(static_cast<::ZMQMessage::ImageMsg_DataType>(val));
        } else goto handle_unusual;
        continue;
      // string image_name = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_image_name(), ptr, ctx, "ZMQMessage.ImageMsg.image_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ImageMsg::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ZMQMessage.ImageMsg)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes image_data = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_image_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 image_width = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &image_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 image_height = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &image_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 image_dst_width = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &image_dst_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 image_dst_height = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &image_dst_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ZMQMessage.ImageFormat image_format = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_image_format(static_cast< ::ZMQMessage::ImageFormat >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ZMQMessage.ImageMsg.DataType data_type = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_data_type(static_cast< ::ZMQMessage::ImageMsg_DataType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string image_name = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_image_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->image_name().data(), static_cast<int>(this->image_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "ZMQMessage.ImageMsg.image_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ZMQMessage.ImageMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ZMQMessage.ImageMsg)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ImageMsg::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ZMQMessage.ImageMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes image_data = 1;
  if (this->image_data().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->image_data(), output);
  }

  // int32 image_width = 2;
  if (this->image_width() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->image_width(), output);
  }

  // int32 image_height = 3;
  if (this->image_height() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->image_height(), output);
  }

  // int32 image_dst_width = 4;
  if (this->image_dst_width() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->image_dst_width(), output);
  }

  // int32 image_dst_height = 5;
  if (this->image_dst_height() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->image_dst_height(), output);
  }

  // .ZMQMessage.ImageFormat image_format = 6;
  if (this->image_format() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      6, this->image_format(), output);
  }

  // .ZMQMessage.ImageMsg.DataType data_type = 7;
  if (this->data_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      7, this->data_type(), output);
  }

  // string image_name = 8;
  if (this->image_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->image_name().data(), static_cast<int>(this->image_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ZMQMessage.ImageMsg.image_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->image_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ZMQMessage.ImageMsg)
}

::PROTOBUF_NAMESPACE_ID::uint8* ImageMsg::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ZMQMessage.ImageMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes image_data = 1;
  if (this->image_data().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->image_data(), target);
  }

  // int32 image_width = 2;
  if (this->image_width() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->image_width(), target);
  }

  // int32 image_height = 3;
  if (this->image_height() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->image_height(), target);
  }

  // int32 image_dst_width = 4;
  if (this->image_dst_width() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->image_dst_width(), target);
  }

  // int32 image_dst_height = 5;
  if (this->image_dst_height() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->image_dst_height(), target);
  }

  // .ZMQMessage.ImageFormat image_format = 6;
  if (this->image_format() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->image_format(), target);
  }

  // .ZMQMessage.ImageMsg.DataType data_type = 7;
  if (this->data_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->data_type(), target);
  }

  // string image_name = 8;
  if (this->image_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->image_name().data(), static_cast<int>(this->image_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ZMQMessage.ImageMsg.image_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        8, this->image_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ZMQMessage.ImageMsg)
  return target;
}

size_t ImageMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ZMQMessage.ImageMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes image_data = 1;
  if (this->image_data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->image_data());
  }

  // string image_name = 8;
  if (this->image_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->image_name());
  }

  // int32 image_width = 2;
  if (this->image_width() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->image_width());
  }

  // int32 image_height = 3;
  if (this->image_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->image_height());
  }

  // int32 image_dst_width = 4;
  if (this->image_dst_width() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->image_dst_width());
  }

  // int32 image_dst_height = 5;
  if (this->image_dst_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->image_dst_height());
  }

  // .ZMQMessage.ImageFormat image_format = 6;
  if (this->image_format() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->image_format());
  }

  // .ZMQMessage.ImageMsg.DataType data_type = 7;
  if (this->data_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->data_type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImageMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ZMQMessage.ImageMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ImageMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ZMQMessage.ImageMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ZMQMessage.ImageMsg)
    MergeFrom(*source);
  }
}

void ImageMsg::MergeFrom(const ImageMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ZMQMessage.ImageMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.image_data().size() > 0) {

    image_data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.image_data_);
  }
  if (from.image_name().size() > 0) {

    image_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.image_name_);
  }
  if (from.image_width() != 0) {
    set_image_width(from.image_width());
  }
  if (from.image_height() != 0) {
    set_image_height(from.image_height());
  }
  if (from.image_dst_width() != 0) {
    set_image_dst_width(from.image_dst_width());
  }
  if (from.image_dst_height() != 0) {
    set_image_dst_height(from.image_dst_height());
  }
  if (from.image_format() != 0) {
    set_image_format(from.image_format());
  }
  if (from.data_type() != 0) {
    set_data_type(from.data_type());
  }
}

void ImageMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ZMQMessage.ImageMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageMsg::CopyFrom(const ImageMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ZMQMessage.ImageMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageMsg::IsInitialized() const {
  return true;
}

void ImageMsg::Swap(ImageMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImageMsg::InternalSwap(ImageMsg* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  image_data_.Swap(&other->image_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  image_name_.Swap(&other->image_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(image_width_, other->image_width_);
  swap(image_height_, other->image_height_);
  swap(image_dst_width_, other->image_dst_width_);
  swap(image_dst_height_, other->image_dst_height_);
  swap(image_format_, other->image_format_);
  swap(data_type_, other->data_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ImageMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ZMQMsg::InitAsDefaultInstance() {
  ::ZMQMessage::_ZMQMsg_default_instance_._instance.get_mutable()->img_msg_ = const_cast< ::ZMQMessage::ImageMsg*>(
      ::ZMQMessage::ImageMsg::internal_default_instance());
}
class ZMQMsg::HasBitSetters {
 public:
  static const ::ZMQMessage::ImageMsg& img_msg(const ZMQMsg* msg);
};

const ::ZMQMessage::ImageMsg&
ZMQMsg::HasBitSetters::img_msg(const ZMQMsg* msg) {
  return *msg->img_msg_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ZMQMsg::kMsgTypeFieldNumber;
const int ZMQMsg::kImgMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ZMQMsg::ZMQMsg()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ZMQMessage.ZMQMsg)
}
ZMQMsg::ZMQMsg(const ZMQMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_img_msg()) {
    img_msg_ = new ::ZMQMessage::ImageMsg(*from.img_msg_);
  } else {
    img_msg_ = nullptr;
  }
  msg_type_ = from.msg_type_;
  // @@protoc_insertion_point(copy_constructor:ZMQMessage.ZMQMsg)
}

void ZMQMsg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ZMQMsg_zmq_5fmsg_2eproto.base);
  ::memset(&img_msg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_type_) -
      reinterpret_cast<char*>(&img_msg_)) + sizeof(msg_type_));
}

ZMQMsg::~ZMQMsg() {
  // @@protoc_insertion_point(destructor:ZMQMessage.ZMQMsg)
  SharedDtor();
}

void ZMQMsg::SharedDtor() {
  if (this != internal_default_instance()) delete img_msg_;
}

void ZMQMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ZMQMsg& ZMQMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ZMQMsg_zmq_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void ZMQMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:ZMQMessage.ZMQMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && img_msg_ != nullptr) {
    delete img_msg_;
  }
  img_msg_ = nullptr;
  msg_type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ZMQMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ZMQMessage.ZMQMsg.MsgType msg_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_msg_type(static_cast<::ZMQMessage::ZMQMsg_MsgType>(val));
        } else goto handle_unusual;
        continue;
      // .ZMQMessage.ImageMsg img_msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_img_msg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ZMQMsg::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ZMQMessage.ZMQMsg)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ZMQMessage.ZMQMsg.MsgType msg_type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_msg_type(static_cast< ::ZMQMessage::ZMQMsg_MsgType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ZMQMessage.ImageMsg img_msg = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_img_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ZMQMessage.ZMQMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ZMQMessage.ZMQMsg)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ZMQMsg::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ZMQMessage.ZMQMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ZMQMessage.ZMQMsg.MsgType msg_type = 1;
  if (this->msg_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->msg_type(), output);
  }

  // .ZMQMessage.ImageMsg img_msg = 2;
  if (this->has_img_msg()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::img_msg(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ZMQMessage.ZMQMsg)
}

::PROTOBUF_NAMESPACE_ID::uint8* ZMQMsg::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ZMQMessage.ZMQMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ZMQMessage.ZMQMsg.MsgType msg_type = 1;
  if (this->msg_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->msg_type(), target);
  }

  // .ZMQMessage.ImageMsg img_msg = 2;
  if (this->has_img_msg()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::img_msg(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ZMQMessage.ZMQMsg)
  return target;
}

size_t ZMQMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ZMQMessage.ZMQMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ZMQMessage.ImageMsg img_msg = 2;
  if (this->has_img_msg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *img_msg_);
  }

  // .ZMQMessage.ZMQMsg.MsgType msg_type = 1;
  if (this->msg_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->msg_type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ZMQMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ZMQMessage.ZMQMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const ZMQMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ZMQMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ZMQMessage.ZMQMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ZMQMessage.ZMQMsg)
    MergeFrom(*source);
  }
}

void ZMQMsg::MergeFrom(const ZMQMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ZMQMessage.ZMQMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_img_msg()) {
    mutable_img_msg()->::ZMQMessage::ImageMsg::MergeFrom(from.img_msg());
  }
  if (from.msg_type() != 0) {
    set_msg_type(from.msg_type());
  }
}

void ZMQMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ZMQMessage.ZMQMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZMQMsg::CopyFrom(const ZMQMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ZMQMessage.ZMQMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZMQMsg::IsInitialized() const {
  return true;
}

void ZMQMsg::Swap(ZMQMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ZMQMsg::InternalSwap(ZMQMsg* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(img_msg_, other->img_msg_);
  swap(msg_type_, other->msg_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ZMQMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ZMQMessage
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ZMQMessage::ImageMsg* Arena::CreateMaybeMessage< ::ZMQMessage::ImageMsg >(Arena* arena) {
  return Arena::CreateInternal< ::ZMQMessage::ImageMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::ZMQMessage::ZMQMsg* Arena::CreateMaybeMessage< ::ZMQMessage::ZMQMsg >(Arena* arena) {
  return Arena::CreateInternal< ::ZMQMessage::ZMQMsg >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
